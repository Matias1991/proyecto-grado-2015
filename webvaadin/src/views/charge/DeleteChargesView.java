package views.charge;

import java.util.Collection;

import org.vaadin.dialogs.ConfirmDialog;

import views.BaseView;

import com.example.webvaadin.WebvaadinUI;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.filter.SimpleStringFilter;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeListener;
import com.vaadin.event.SelectionEvent;
import com.vaadin.event.SelectionEvent.SelectionListener;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Grid;
import com.vaadin.ui.Grid.HeaderCell;
import com.vaadin.ui.Grid.HeaderRow;
import com.vaadin.ui.Grid.SelectionMode;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;

import controllers.ChargeController;
import entities.Bill;
import entities.Charge;
import entities.RequestContext;

public class DeleteChargesView extends BaseView {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button btnDelete;
	@AutoGenerated
	private Label lblInfo;
	@AutoGenerated
	private Label lblTitle;
	private Grid billsGrid;
	private BeanItemContainer<Charge> beanContainer;
	private Label lblMessage;
	private static final long serialVersionUID = -6425680180232429909L;

	public DeleteChargesView() {

		super("Cobros", "Eliminar cobros");

		buildMainLayout();
		setCompositionRoot(mainLayout);

		lblMessage = new Label("");
		mainLayout.addComponent(lblMessage, "top:183.0px;left:0.0px;");

		btnDelete.addClickListener(new Button.ClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				btnDelete.setEnabled(false);

				ConfirmDialog.show(WebvaadinUI.getCurrent(), "Confirmación",
						"¿Desea eliminar el cobro seleccionado?", "Si", "No",
						new ConfirmDialog.Listener() {

							private static final long serialVersionUID = 1L;

							@Override
							public void onClose(ConfirmDialog confirm) {
								if (confirm.isConfirmed()) {

									int[] ids = new int[billsGrid
											.getSelectedRows().size()];
									int i = 0;
									for (Object itemId : billsGrid
											.getSelectedRows()) {
										BeanItem<Charge> item = beanContainer
												.getItem(itemId);
										ids[i] = item.getBean().getId();
										i++;
									}

									ChargeController.deleteCharges(ids);

									btnDelete.setEnabled(false);
									if (billsGrid != null) {
										mainLayout.removeComponent(billsGrid);
									}
									buildGrid();
								}

							}
						});
				btnDelete.setEnabled(true);
			}
		});
	}

	public void buildGrid() {

		Collection<Charge> charges = ChargeController.getCharges(false, false);

		if (charges != null && charges.size() > 0) {

			if (billsGrid != null) {
				mainLayout.removeComponent(billsGrid);
			}

			lblMessage.setValue("");

			btnDelete.setVisible(true);

			beanContainer = new BeanItemContainer<Charge>(Charge.class, charges);

			billsGrid = new Grid(beanContainer);
			billsGrid.removeColumn("id");
			billsGrid.removeColumn("billId");
			billsGrid.removeColumn("createdDateTimeUTC");
			billsGrid.removeColumn("amount");
			billsGrid.removeColumn("billDescription");
			billsGrid.setColumnOrder("number", "description", "amountToShow",
					"createdDateTimeUTCToShow",
					"billCode");

			billsGrid.getColumn("number").setHeaderCaption("N° de recibo");
			billsGrid.getColumn("description").setHeaderCaption(
					"Descripción cobro");
			billsGrid.getColumn("amountToShow").setHeaderCaption("Importe");
			billsGrid.getColumn("createdDateTimeUTCToShow").setHeaderCaption(
					"Fecha de creación");
			billsGrid.getColumn("billCode").setHeaderCaption(
					"Codigo de factura");
			billsGrid.getColumn("description").setWidth(200);
			billsGrid.setWidth(100, Unit.PERCENTAGE);
			billsGrid.setHeight(100, Unit.PERCENTAGE);
			billsGrid.setSelectionMode(SelectionMode.SINGLE);
			billsGrid.getSelectedRows().clear();

			HeaderRow filterRow = billsGrid.appendHeaderRow();
			for (final Object pid : billsGrid.getContainerDataSource()
					.getContainerPropertyIds()) {
				HeaderCell cell = filterRow.getCell(pid);
				if (cell != null) {
					TextField txtFilter = new TextField();
					txtFilter.setImmediate(true);
					txtFilter.setWidth("125px");
					txtFilter.setHeight("30px");
					txtFilter.setInputPrompt("Filtro");

					txtFilter.addTextChangeListener(new TextChangeListener() {
						private static final long serialVersionUID = 1L;

						@Override
						public void textChange(TextChangeEvent event) {
							String newValue = (String) event.getText();

							@SuppressWarnings("unchecked")
							BeanItemContainer<Bill> container = ((BeanItemContainer<Bill>) billsGrid
									.getContainerDataSource());

							container.removeContainerFilters(pid);
							if (null != newValue && !newValue.isEmpty()) {
								container
										.addContainerFilter(new SimpleStringFilter(
												pid, newValue, true, false));
							}
						}
					});
					cell.setComponent(txtFilter);
				}
			}

			billsGrid.addSelectionListener(new SelectionListener() {
				private static final long serialVersionUID = 1L;

				@Override
				public void select(SelectionEvent event) {
					btnDelete
							.setEnabled(billsGrid.getSelectedRows().size() > 0);
				}
			});

			mainLayout.addComponent(billsGrid, "top:35%;left:0px;");
		} else {
			if (billsGrid != null) {
				billsGrid.setVisible(false);
			}

			btnDelete.setVisible(false);

			lblMessage.setValue("No hay cobros para mostrar");
		}
	}

	@Override
	public void enter(ViewChangeEvent event) {
		super.enter(event);
		if (RequestContext.getRequestContext() != null) {
			buildGrid();
		}
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("880px");
		mainLayout.setHeight("501px");

		// top-level component properties
		setWidth("880px");
		setHeight("501px");

		// lblTitle
		lblTitle = new Label();
		lblTitle.setStyleName("titleLabel");
		lblTitle.setImmediate(false);
		lblTitle.setWidth("-1px");
		lblTitle.setHeight("-1px");
		lblTitle.setValue(getBreadCrumbToShow());
		mainLayout.addComponent(lblTitle, "top:40.0px;left:0.0px;");

		// lblInfo
		lblInfo = new Label();
		lblInfo.setStyleName("update-bill-lblInformation");
		lblInfo.setContentMode(ContentMode.HTML);
		lblInfo.setImmediate(false);
		lblInfo.setWidth("-1px");
		lblInfo.setHeight("-1px");
		StringBuilder strBuilder = new StringBuilder();
		strBuilder
				.append("<b>Importante:</b> Los cobros que se muestran cumplen con lo siguiente</br>");
		strBuilder.append("- No estan asociados a facturas liquidadas</br>");
		strBuilder
				.append("- Pertencen a facturas asociadas a proyectos activos");
		lblInfo.setValue(strBuilder.toString());
		mainLayout.addComponent(lblInfo, "top:100.0px;left:0px;");

		// btnDelete
		btnDelete = new Button();
		btnDelete.setCaption("Eliminar");
		btnDelete.setEnabled(false);
		btnDelete.setImmediate(true);
		btnDelete.setWidth("-1px");
		btnDelete.setHeight("-1px");
		btnDelete.setTabIndex(3);
		mainLayout.addComponent(btnDelete, "top:120.0px;right:0px;");

		return mainLayout;
	}
}
