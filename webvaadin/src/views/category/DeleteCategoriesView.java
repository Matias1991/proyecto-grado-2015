package views.category;

import java.util.Collection;

import org.vaadin.dialogs.ConfirmDialog;

import views.BaseView;

import com.example.webvaadin.WebvaadinUI;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.filter.SimpleStringFilter;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeListener;
import com.vaadin.event.SelectionEvent;
import com.vaadin.event.SelectionEvent.SelectionListener;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Grid;
import com.vaadin.ui.Grid.HeaderCell;
import com.vaadin.ui.Grid.HeaderRow;
import com.vaadin.ui.Grid.SelectionMode;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;

import controllers.CategoryController;
import entities.Category;
import entities.RequestContext;

public class DeleteCategoriesView extends BaseView {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button btnDelete;
	@AutoGenerated
	private Label lblTitle;
	private Grid grid;
	private BeanItemContainer<Category> container;
	private Label lblMessage;
	private Label lblInfo;

	public DeleteCategoriesView() {

		super("Rubros", "Eliminar rubros");

		buildMainLayout();
		setCompositionRoot(mainLayout);

		lblMessage = new Label("");
		mainLayout.addComponent(lblMessage, "top:20.0%;left:0.0px;");

		btnDelete.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				btnDelete.setEnabled(false);

				ConfirmDialog.show(WebvaadinUI.getCurrent(), "Confirmación",
						"¿Desea eliminar el rubro seleccionado?", "Si", "No",
						new ConfirmDialog.Listener() {

							@Override
							public void onClose(ConfirmDialog confirm) {
								if (confirm.isConfirmed()) {
									BeanItem<Category> item = container
											.getItem(grid.getSelectedRow());

									if (CategoryController.deleteCategory(item
											.getBean().getId())) {
										grid.getContainerDataSource()
												.removeItem(
														grid.getSelectedRow());
									}

									btnDelete.setEnabled(false);
									if (grid != null) {
										mainLayout.removeComponent(grid);
									}
									buildGrid();
								}

							}
						});
				btnDelete.setEnabled(true);
			}
		});
	}

	public void buildGrid() {
		Collection<Category> categories = CategoryController
				.getCategoriesByActiveProjects();

		container = new BeanItemContainer<Category>(Category.class, categories);

		if (container != null && container.size() > 0) {

			btnDelete.setVisible(true);

			lblMessage.setValue("");
			lblInfo.setVisible(true);

			grid = new Grid(container);
			grid.removeColumn("id");
			grid.removeColumn("projectId");
			grid.removeColumn("categoryTypeId");
			grid.removeColumn("categoryType");
			grid.removeColumn("createdDateTimeUTC");
			grid.removeColumn("isRRHH");
			grid.removeColumn("typeExchange");
			grid.removeColumn("isDollarToShow");
			grid.removeColumn("amountDollar");
			grid.removeColumn("amountPeso");
			grid.removeColumn("currencyDollar");
			grid.removeColumn("categoryTypeToShow");
			grid.removeColumn("ivaTypeId");
			grid.setColumnOrder("description", "amountToShow", "ivaTypeToShow",
					"totalAmountToShow", "typeExchangeToShow", "projectName",
					"createDateTimeUTCToShow", "isRRHHToShow");
			grid.getColumn("description").setHeaderCaption("Descripción");
			grid.getColumn("description").setWidth(200);
			grid.getColumn("amountToShow").setHeaderCaption("Importe sin IVA");
			grid.getColumn("projectName").setHeaderCaption("Asociado a");
			grid.getColumn("typeExchangeToShow").setHeaderCaption(
					"Tipo de cambio");
			grid.getColumn("createDateTimeUTCToShow").setHeaderCaption(
					"Correspondiente al mes");
			grid.getColumn("isRRHHToShow").setHeaderCaption("Tipo de recurso");
			grid.getColumn("ivaTypeToShow").setHeaderCaption("IVA");
			grid.getColumn("totalAmountToShow").setHeaderCaption(
					"Importe IVA incl.");
			grid.setWidth(100, Unit.PERCENTAGE);
			grid.setHeight(100, Unit.PERCENTAGE);
			grid.setSelectionMode(SelectionMode.SINGLE);
			grid.getSelectedRows().clear();

			// Filtros
			HeaderRow filterRow = grid.appendHeaderRow();

			for (final Object pid : grid.getContainerDataSource()
					.getContainerPropertyIds()) {
				HeaderCell cell = filterRow.getCell(pid);
				if (cell != null) {
					TextField txtFilter = new TextField();
					txtFilter.setImmediate(true);
					txtFilter.setWidth("125px");
					txtFilter.setHeight("30px");
					txtFilter.setInputPrompt("Filtro");

					txtFilter.addTextChangeListener(new TextChangeListener() {
						@Override
						public void textChange(TextChangeEvent event) {
							String newValue = (String) event.getText();

							BeanItemContainer<Category> container = ((BeanItemContainer<Category>) grid
									.getContainerDataSource());

							container.removeContainerFilters(pid);
							if (null != newValue && !newValue.isEmpty()) {
								container
										.addContainerFilter(new SimpleStringFilter(
												pid, newValue, true, false));
							}
						}
					});
					cell.setComponent(txtFilter);
				}
			}
			mainLayout.addComponent(grid, "top:28%;left:0px;");

			grid.addSelectionListener(new SelectionListener() {

				@Override
				public void select(SelectionEvent event) {
					btnDelete.setEnabled(grid.getSelectedRows().size() > 0);
				}
			});
		} else {
			lblMessage.setValue("No hay rubros para mostrar");
			lblInfo.setVisible(false);
			if (grid != null) {
				grid.setVisible(false);
			}
			btnDelete.setVisible(false);
		}
	}

	@Override
	public void enter(ViewChangeEvent event) {
		super.enter(event);
		if (RequestContext.getRequestContext() != null) {
			if (grid != null) {
				mainLayout.removeComponent(grid);
			}
			buildGrid();
		}
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("880px");
		mainLayout.setHeight("501px");

		// top-level component properties
		setWidth("880px");
		setHeight("501px");

		// lblTitle
		lblTitle = new Label();
		lblTitle.setStyleName("titleLabel");
		lblTitle.setImmediate(false);
		lblTitle.setWidth("-1px");
		lblTitle.setHeight("-1px");
		lblTitle.setValue(getBreadCrumbToShow());
		mainLayout.addComponent(lblTitle, "top:42.0px;left:0.0px;");

		// btn_delete
		btnDelete = new Button();
		btnDelete.setCaption("Eiminar rubro");
		btnDelete.setEnabled(false);
		btnDelete.setImmediate(true);
		btnDelete.setWidth("-1px");
		btnDelete.setHeight("-1px");
		mainLayout.addComponent(btnDelete, "top:86.0px;left:740.0px;");

		// lblInfo
		lblInfo = new Label();
		lblInfo.setStyleName("update-bill-lblInformation");
		lblInfo.setContentMode(ContentMode.HTML);
		lblInfo.setImmediate(false);
		lblInfo.setWidth("-1px");
		lblInfo.setHeight("-1px");
		StringBuilder strBuilder = new StringBuilder();
		strBuilder
				.append("<b>Importante:</b> Los rubros que se muestran cumplen con lo siguiente:</br>");
		strBuilder.append("- Pertenecen a proyectos activos");
		lblInfo.setValue(strBuilder.toString());
		mainLayout.addComponent(lblInfo, "top:90.0px;left:0.0px;");

		return mainLayout;
	}
}
