package views.category;

import java.util.Calendar;
import java.util.Collection;
import java.util.Date;

import views.BaseView;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.filter.SimpleStringFilter;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeListener;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.shared.ui.datefield.Resolution;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Grid;
import com.vaadin.ui.Grid.HeaderCell;
import com.vaadin.ui.Grid.HeaderRow;
import com.vaadin.ui.Grid.SelectionMode;
import com.vaadin.ui.Label;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TextField;

import controllers.CategoryController;
import entities.Category;
import entities.RequestContext;

public class CatalogCategoriesView extends BaseView {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Label lblTitle;
	private Grid categoriesGrid;
	private BeanItemContainer<Category> beanContainer;
	private Label lblMessage;
	private PopupDateField popupDateFieldTo;
	private PopupDateField popupDateFieldFrom;
	
	
	public CatalogCategoriesView() {
		super("Rubros", "Catálogo de rubros");
		buildMainLayout();
		setCompositionRoot(mainLayout);	

		builInputs();
		
		lblMessage = new Label("");
		mainLayout.addComponent(lblMessage, "top:180px;left:0.0px;");

		popupDateFieldFrom.addValueChangeListener(new ValueChangeListener() {
		    private static final long serialVersionUID = 1L;
		    
			@Override
			public void valueChange(ValueChangeEvent event) {
				buildGrid();
			}
		});
		
		popupDateFieldTo.addValueChangeListener(new ValueChangeListener() {
		    private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				buildGrid(); 
			}
		});
	}

	void builInputs()
	{
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.MONTH, -1);
		popupDateFieldFrom.setValue(cal.getTime());
		popupDateFieldFrom.setDateFormat("MM-yyyy");
		popupDateFieldFrom.setResolution(Resolution.MONTH);
		
		popupDateFieldTo.setValue(new Date());
		popupDateFieldTo.setDateFormat("MM-yyyy");
		popupDateFieldTo.setResolution(Resolution.MONTH);
		
	}
	
	public void buildGrid(){
		Collection<Category> categories = CategoryController.getCategoriesByDate (popupDateFieldFrom.getValue(), popupDateFieldTo.getValue());
		
		if (categories != null && categories.size() > 0) {
			
			if(categoriesGrid != null){
				mainLayout.removeComponent(categoriesGrid);
			}
				
			lblMessage.setValue("");
			
			beanContainer = new BeanItemContainer<Category>(Category.class,categories);
					
			categoriesGrid = new Grid(beanContainer);
			categoriesGrid.removeColumn("id");
			categoriesGrid.removeColumn("projectId");
			categoriesGrid.removeColumn("categoryTypeId");
			categoriesGrid.removeColumn("categoryType");			
			categoriesGrid.removeColumn("createdDateTimeUTC");
			categoriesGrid.removeColumn("isRRHH");			
			categoriesGrid.removeColumn("typeExchange");
			categoriesGrid.removeColumn("isDollarToShow");		
			categoriesGrid.removeColumn("amountDollar");		
			categoriesGrid.removeColumn("amountPeso");			
			categoriesGrid.removeColumn("currencyDollar");
			categoriesGrid.removeColumn("categoryTypeToShow");
			categoriesGrid.removeColumn("ivaTypeId");
			categoriesGrid.setColumnOrder("description", "amountToShow", "ivaTypeToShow", "totalAmountToShow", "typeExchangeToShow",
					"projectName","createDateTimeUTCToShow","isRRHHToShow");
			categoriesGrid.getColumn("description").setHeaderCaption("Descripción");
			categoriesGrid.getColumn("description").setWidth(200);
			categoriesGrid.getColumn("amountToShow").setHeaderCaption("Importe sin IVA");
			categoriesGrid.getColumn("projectName").setHeaderCaption("Asociado a");
			categoriesGrid.getColumn("typeExchangeToShow").setHeaderCaption("Tipo de cambio");
			categoriesGrid.getColumn("createDateTimeUTCToShow").setHeaderCaption("Correspondiente al mes");
			categoriesGrid.getColumn("isRRHHToShow").setHeaderCaption("Tipo de recurso");
			categoriesGrid.getColumn("ivaTypeToShow").setHeaderCaption("IVA");
			categoriesGrid.getColumn("totalAmountToShow").setHeaderCaption("Importe IVA incl.");
			
			
			categoriesGrid.setWidth(100, Unit.PERCENTAGE);
			categoriesGrid.setHeight(500, Unit.PIXELS);
			categoriesGrid.setSelectionMode(SelectionMode.NONE);
			categoriesGrid.getSelectedRows().clear();
			
			// Filtros
			HeaderRow filterRow = categoriesGrid.appendHeaderRow();
			
			for (final Object pid : categoriesGrid.getContainerDataSource()
					.getContainerPropertyIds()) {
				HeaderCell cell = filterRow.getCell(pid);
				if (cell != null) {
					TextField txtFilter = new TextField();
					txtFilter.setImmediate(true);
					txtFilter.setWidth("125px");
					txtFilter.setHeight("30px");
					txtFilter.setInputPrompt("Filtro");

					txtFilter.addTextChangeListener(new TextChangeListener() {
						private static final long serialVersionUID = 1L;

						@Override
						public void textChange(TextChangeEvent event) {
							String newValue = (String) event.getText();

							@SuppressWarnings("unchecked")
							BeanItemContainer<Category> container = ((BeanItemContainer<Category>) categoriesGrid
									.getContainerDataSource());

							container.removeContainerFilters(pid);
							if (null != newValue && !newValue.isEmpty()) {
								container.addContainerFilter(new SimpleStringFilter(
												pid, newValue, true, false));
							}
						}
					});
					cell.setComponent(txtFilter);
				}
			}
			
			mainLayout.addComponent(categoriesGrid, "top:20%;left:0px;");
		}
		else {
			if(categoriesGrid != null)
			{
				categoriesGrid.setVisible(false);
			}
			lblMessage.setValue("No hay rubros para mostrar para ese intervalo de fechas");
		}
	}
	
	@Override
	public void enter(ViewChangeEvent event) {
		super.enter(event);		
		if(RequestContext.getRequestContext() != null){
			if (categoriesGrid != null) {
				mainLayout.removeComponent(categoriesGrid);
			}
			buildGrid();
			builInputs();
		}
		
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("880px");
		mainLayout.setHeight("880px");

		// popupDateFieldFrom
		popupDateFieldFrom = new PopupDateField();
		popupDateFieldFrom.setCaption("Desde");
		popupDateFieldFrom.setImmediate(true);
		popupDateFieldFrom.setWidth("120px");
		popupDateFieldFrom.setHeight("-1px");
		popupDateFieldFrom.setRequired(true);
		mainLayout.addComponent(popupDateFieldFrom, "top:120.0px;left:0.0px;");
		
		// popupDateFieldTo
		popupDateFieldTo = new PopupDateField();
		popupDateFieldTo.setCaption("Hasta");
		popupDateFieldTo.setImmediate(true);
		popupDateFieldTo.setWidth("120px");
		popupDateFieldTo.setHeight("-1px");
		popupDateFieldTo.setRequired(true);
		mainLayout.addComponent(popupDateFieldTo, "top:120.0px;left:140.0px;");
		
		// lblTitle
		lblTitle = new Label();
		lblTitle.setImmediate(false);
		lblTitle.setWidth("-1px");
		lblTitle.setHeight("-1px");
		lblTitle.setValue(getBreadCrumbToShow());
		lblTitle.setStyleName("titleLabel");
		mainLayout.addComponent(lblTitle, "top:42.0px;left:0.0px;");
		
		return mainLayout;
	}
}
