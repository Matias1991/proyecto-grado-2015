package views.category;

import java.util.Collection;
import java.util.Date;

import utils.PopupWindow;
import views.BaseView;

import com.example.webvaadin.WebvaadinUI;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.converter.StringToDoubleConverter;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.shared.ui.datefield.Resolution;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Label;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;

import controllers.CategoryController;
import controllers.ProjectController;
import entities.Category;
import entities.Project;
import entities.RequestContext;

public class CreateCategoryView extends BaseView {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private OptionGroup isRRHH;
	@AutoGenerated
	private PopupDateField createdDateTimeField;
	@AutoGenerated
	private Button btnCancel;
	@AutoGenerated
	private Button btnCreate;
	@AutoGenerated
	private OptionGroup categoryType;
	@AutoGenerated
	private TextField txtAmount;
	@AutoGenerated
	private TextArea txtDescription;
	@AutoGenerated
	private Label lblTitle;
	private OptionGroup optCurrency;
	private TextField txtTypeExchange;
	private ComboBox cboProject;
	private ComboBox cboxIvaTypes;
	private TextField txtTotalAmount;
	private Collection<Project> projects;

	public CreateCategoryView() {

		super("Rubros", "Crear rubro");

		buildMainLayout();
		setCompositionRoot(mainLayout);

		categoryType.addItems("Empresa", "Proyecto");
		categoryType.select("Empresa");

		optCurrency.addItems("Pesos", "Dolares");
		optCurrency.select("Pesos");

		isRRHH.addItems("Material", "Humano");
		isRRHH.select("Material");

		categoryType.addValueChangeListener(new ValueChangeListener() {
			@Override
			public void valueChange(ValueChangeEvent event) {
				if (categoryType.getValue() == "Empresa") {
					isRRHH.setValue("Material");
					enablePanelProject(false);
					optCurrency.setEnabled(true);
				} else{
					enablePanelProject(true);
					optCurrency.setEnabled(false);
				}
			}
		});

		optCurrency.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				if (optCurrency.getValue() == "Dolares") {
					txtTypeExchange.setVisible(true);
				} else {
					txtTypeExchange.setVisible(false);
				}
			}
		});
		

		cboProject.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (cboProject.getValue() != null) {
					int id = (int) cboProject.getValue();
					Project project = getProjectById(id);
					buildCategoryCurrency(project.getIsCurrencyDollar());
				}
			}
		});

		btnCreate.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				btnCreate.setEnabled(false);
				txtDescription.setValidationVisible(true);
				txtAmount.setValidationVisible(true);
				txtTypeExchange.setValidationVisible(true);
				cboProject.setValidationVisible(true);
				txtTotalAmount.setValidationVisible(true);
				cboxIvaTypes.setValidationVisible(true);

				boolean valid = true;

				if (!txtAmount.isValid()
						|| !txtDescription.isValid()
						|| !cboxIvaTypes.isValid()
						|| !txtTotalAmount.isValid()
						|| !createdDateTimeField.isValid()
						|| (categoryType.getValue() == "Proyecto" && !cboProject
								.isValid())
						|| (optCurrency.getValue() == "Dolares" && !txtTypeExchange
								.isValid())) {
					txtAmount.setRequiredError("Es requerido");
					txtDescription.setRequiredError("Es requerido");
					txtAmount.setConversionError("Debe ser numérico");
					createdDateTimeField.setRequiredError("Es requerido");
					cboProject.setRequiredError("Es requerido");
					txtTypeExchange.setRequiredError("Es requerido");
					txtTypeExchange.setConversionError("Debe ser numérico");
					txtTotalAmount.setRequiredError("Es requerido");
					cboxIvaTypes.setRequiredError("Es requerido");
					valid = false;
				}

				if (valid) {
					Category category = new Category();
					category.setDescription(txtDescription.getValue());

					if (optCurrency.getValue() == "Pesos") {
						category.setAmountPeso((Double) (txtAmount.getConvertedValue()));
						category.setIsCurrencyDollar(false);
					} else {
						category.setAmountDollar((Double) (txtAmount.getConvertedValue()));
						category.setTypeExchange((Double) (txtTypeExchange.getConvertedValue()));
						category.setIsCurrencyDollar(true);
					}

					if (categoryType.getValue().equals("Empresa")) {
						category.setCategoryTypeId(1);
					} else if (categoryType.getValue().equals("Proyecto")) {
						category.setCategoryTypeId(2);
						category.setProjectId((Integer) cboProject.getValue());
						Project project = getProjectById((Integer) cboProject.getValue());
						if(project.getIsCurrencyDollar()){
							category.setAmountDollar((Double) (txtAmount.getConvertedValue()));
							category.setTypeExchange((Double) (txtTypeExchange.getConvertedValue()));
							category.setIsCurrencyDollar(true);
						}
					}

					if (isRRHH.getValue() == "Material")
						category.setIsRRHH(false);
					else
						category.setIsRRHH(true);

					category.setCreatedDateTimeUTC(createdDateTimeField
							.getValue());

					category.setIvaTypeId((int) cboxIvaTypes.getValue());

					boolean result = CategoryController
							.createCategory(category);

					if (result) {
						new PopupWindow("AVISO", "Rubro creado correctamente");

						cleanInputs();
					}
				}

				btnCreate.setEnabled(true);
			}
		});

		btnCancel.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				getUI().getNavigator().navigateTo(WebvaadinUI.MAINMENU);
			}
		});

		txtAmount.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				buildTotalAmount();
			}
		});

		cboxIvaTypes.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				buildTotalAmount();
			}
		});
	}

	public void buildProjectCombo() {
		projects = ProjectController.getActiveProjects();

		cboProject.removeAllItems();
		if (projects != null && projects.size() > 0) {
			for (Project project : projects) {
				cboProject.addItem(project.getId());
				cboProject.setItemCaption(project.getId(), project.getName());
			}
		}
	}

	void buildTotalAmount() {
		if (cboxIvaTypes.getValue() != null && txtAmount.getValue() != null) {

			if ((int) cboxIvaTypes.getValue() == 1)// - 0%
			{
				txtTotalAmount.setConvertedValue((Double) txtAmount
						.getConvertedValue());
			} else if ((int) cboxIvaTypes.getValue() == 2)// - 10%
			{
				txtTotalAmount.setConvertedValue((Double) txtAmount
						.getConvertedValue() * 1.10);
			} else if ((int) cboxIvaTypes.getValue() == 3)// - 22%
			{
				txtTotalAmount.setConvertedValue((Double) txtAmount
						.getConvertedValue() * 1.22);
			}
		} else
			txtTotalAmount.clear();
	}

	@Override
	public void enter(ViewChangeEvent event) {
		super.enter(event);
		if (RequestContext.getRequestContext() != null) {
			// Compruebo si el usuario es de tipo socio
			if (RequestContext.getRequestContext().getUserType() != 2) {
				getUI().getNavigator().navigateTo(WebvaadinUI.MAINMENU);
			}
			txtDescription.setValue("");
			txtAmount.setValue("");
			txtTypeExchange.setValue("");
			btnCreate.setEnabled(true);
			categoryType.select("Empresa");
			isRRHH.select("Material");
			txtTypeExchange.setVisible(false);
			cboProject.setVisible(false);
			cboxIvaTypes.removeAllItems();

			cboxIvaTypes.addItem(1);
			cboxIvaTypes.setItemCaption(1, "0%");
			cboxIvaTypes.addItem(2);
			cboxIvaTypes.setItemCaption(2, "10%");
			cboxIvaTypes.addItem(3);
			cboxIvaTypes.setItemCaption(3, "22%");

			cleanInputs();
		}
	}

	void cleanInputs() {
		txtDescription.clear();
		txtAmount.clear();
		txtTypeExchange.clear();
		txtDescription.setValidationVisible(false);
		cboProject.setValidationVisible(false);
		txtAmount.setValidationVisible(false);
		txtTypeExchange.setValidationVisible(false);
		enablePanelProject(false);
		categoryType.select("Empresa");
		optCurrency.select("Pesos");
		txtTypeExchange.setVisible(false);

		cboxIvaTypes.clear();
		txtTotalAmount.clear();
		cboxIvaTypes.setValidationVisible(false);
		txtTotalAmount.setValidationVisible(false);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("1000px");
		mainLayout.setHeight("1000px");

		// top-level component properties
		setWidth("1000px");
		setHeight("1000px");

		// label_1
		lblTitle = new Label();
		lblTitle.setStyleName("titleLabel");
		lblTitle.setImmediate(false);
		lblTitle.setWidth("-1px");
		lblTitle.setHeight("-1px");
		lblTitle.setValue(getBreadCrumbToShow());
		mainLayout.addComponent(lblTitle, "top:42.0px;left:0.0px;");

		// txtDescription
		txtDescription = new TextArea();
		txtDescription.setCaption("Descripción");
		txtDescription.setImmediate(true);
		txtDescription.setWidth("240px");
		txtDescription.setHeight("-1px");
		txtDescription.setTabIndex(1);
		txtDescription.setRequired(true);
		txtDescription.setMaxLength(240);
		txtDescription.setRows(2);
		txtDescription.setNullRepresentation("");
		mainLayout.addComponent(txtDescription, "top:116.0px;left:0.0px;");

		// createdDateTimeField
		createdDateTimeField = new PopupDateField();
		createdDateTimeField.setCaption("Correspondiente al mes");
		createdDateTimeField.setImmediate(true);
		createdDateTimeField.setWidth("140px");
		createdDateTimeField.setHeight("-1px");
		createdDateTimeField.setRequired(true);
		createdDateTimeField.setDateFormat("MM-yyyy");
		createdDateTimeField.setValue(new Date());
		createdDateTimeField.setResolution(Resolution.MONTH);
		mainLayout.addComponent(createdDateTimeField, "top:210.0px;right:513.0px;left:0.0px;");

		// categoryType
		categoryType = new OptionGroup();
		categoryType.setCaption("Asociado a");
		categoryType.setImmediate(true);
		categoryType.setWidth("-1px");
		categoryType.setHeight("-1px");
		mainLayout.addComponent(categoryType, "top:275.0px;left:3.0px;");

		// isRRHH
		isRRHH = new OptionGroup();
		isRRHH.setCaption("Tipo de recurso");
		isRRHH.setImmediate(false);
		isRRHH.setVisible(true);
		isRRHH.setWidth("-1px");
		isRRHH.setHeight("-1px");
		mainLayout.addComponent(isRRHH, "top:275.0px;left:130.0px;");
		
		// optCurrency
		optCurrency = new OptionGroup();
		optCurrency.setCaption("Moneda");
		optCurrency.setImmediate(true);
		optCurrency.setWidth("-1px");
		optCurrency.setHeight("-1px");
		mainLayout.addComponent(optCurrency,
				"top:360.0px;right:372.0px;left:3.0px;");

		// txtTypeExchange
		txtTypeExchange = new TextField();
		txtTypeExchange.setCaption("Tipo de cambio");
		txtTypeExchange.setImmediate(true);
		txtTypeExchange.setWidth("100px");
		txtTypeExchange.setHeight("-1px");
		txtTypeExchange.setRequired(true);
		txtTypeExchange.setNullRepresentation("");
		txtTypeExchange.setConverter(new StringToDoubleConverter());
		mainLayout.addComponent(txtTypeExchange,
				"top:460.0px;right:372.0px;left:160.0px;");

		// txtAmount
		txtAmount = new TextField();
		txtAmount.setCaption("Importe sin IVA");
		txtAmount.setImmediate(true);
		txtAmount.setWidth("150px");
		txtAmount.setHeight("-1px");
		txtAmount.setTabIndex(2);
		txtAmount.setRequired(true);
		txtAmount.setNullRepresentation("");
		txtAmount.setConverter(new StringToDoubleConverter());
		mainLayout.addComponent(txtAmount,
				"top:460.0px;right:372.0px;left:0.0px;");

		// cboxIvaTypes
		cboxIvaTypes = new ComboBox();
		cboxIvaTypes.setCaption("IVA");
		cboxIvaTypes.setImmediate(true);
		cboxIvaTypes.setWidth("120px");
		cboxIvaTypes.setHeight("-1px");
		cboxIvaTypes.setRequired(true);
		cboxIvaTypes.setTabIndex(5);
		mainLayout.addComponent(cboxIvaTypes, "top:525.0px;left:0.0px;");

		// txtTotalAmount
		txtTotalAmount = new TextField();
		txtTotalAmount.setCaption("Importe IVA incl.");
		txtTotalAmount.setImmediate(true);
		txtTotalAmount.setWidth("155px");
		txtTotalAmount.setHeight("-1px");
		txtTotalAmount.setEnabled(false);
		txtTotalAmount.setNullRepresentation("");
		txtTotalAmount.setConverter(new StringToDoubleConverter());
		txtTotalAmount.setTabIndex(6);
		mainLayout.addComponent(txtTotalAmount, "top:590.0px;left:0.0px;");

		// btnCreate
		btnCreate = new Button();
		btnCreate.setCaption("Crear");
		btnCreate.setImmediate(true);
		btnCreate.setWidth("120px");
		btnCreate.setHeight("-1px");
		btnCreate.setTabIndex(3);
		mainLayout.addComponent(btnCreate, "top:650.0px;right:500.0px;left:0.0px;");

		// btnCancel
		btnCancel = new Button();
		btnCancel.setCaption("Cancelar");
		btnCancel.setImmediate(true);
		btnCancel.setWidth("120px");
		btnCancel.setHeight("-1px");
		btnCancel.setTabIndex(4);
		mainLayout.addComponent(btnCancel, "top:650.0px;right:340.0px;left:140.0px;");

		// cboProject
		cboProject = new ComboBox();
		cboProject.setImmediate(true);
		cboProject.setWidth("250px");
		cboProject.setHeight("-1px");
		cboProject.setCaption("Proyecto");
		cboProject.setInputPrompt("Seleccione el proyecto");
		cboProject.setNullSelectionAllowed(false);
		cboProject.setRequired(true);
		mainLayout.addComponent(cboProject, "top:116.0px;left:270.0px;");

		return mainLayout;
	}

	void enablePanelProject(boolean value) {
		cboProject.setVisible(value);
		if (!value) {
			cboProject.removeAllItems();
		} else {
			buildProjectCombo();
		}
	}
	
	void buildCategoryCurrency(boolean isCurrencyDollar)
	{	
		if(isCurrencyDollar)
		{
			txtTypeExchange.setVisible(true);
			txtAmount.setCaption("Importe sin IVA (U$S)");
			txtTotalAmount.setCaption("Importe IVA incl. (U$S)");
		}
		else
		{
			txtTypeExchange.setVisible(false);
			txtAmount.setCaption("Importe sin IVA ($)");
			txtTotalAmount.setCaption("Importe IVA incl. ($)");
		}
	} 
	
	Project getProjectById(int id)
	{
		for(Project p : projects)
		{
			if(p.getId() == id)
			{
				return p;
			}
		}
		return null;
	}
}
