package views.category;

import java.util.Collection;
import java.util.Date;

import org.eclipse.jdt.core.compiler.BuildContext;

import utils.PopupWindow;
import views.BaseView;

import com.example.webvaadin.WebvaadinUI;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.converter.StringToDoubleConverter;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.UserError;
import com.vaadin.shared.ui.datefield.Resolution;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Grid;
import com.vaadin.ui.Grid.SelectionMode;
import com.vaadin.ui.Label;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TextField;

import controllers.CategoryController;
import controllers.ProjectController;
import entities.Category;
import entities.Project;
import entities.RequestContext;

public class CreateCategoryView extends BaseView {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private OptionGroup isRRHH;
	@AutoGenerated
	private PopupDateField createdDateTimeField;
	@AutoGenerated
	private Button btnCancel;
	@AutoGenerated
	private Button btnCreate;
	@AutoGenerated
	private OptionGroup categoryType;
	@AutoGenerated
	private TextField txtAmount;
	@AutoGenerated
	private TextField txtDescription;
	@AutoGenerated
	private Label lblTitle;
	//private Grid projectsGrid;
	private BeanItemContainer<Project> beanContainer;
	private OptionGroup optCurrency;
	private TextField txtTypeExchange;
	private ComboBox cboProject;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CreateCategoryView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		categoryType.addItems("Empresa", "Proyecto");
		categoryType.select("Empresa");
		
		optCurrency.addItems("Pesos", "Dolares");
		optCurrency.select("Pesos");
		
		isRRHH.addItems("Material", "Humano");
		isRRHH.select("Material");
		
		
        categoryType.addValueChangeListener(new ValueChangeListener() {
        	 @Override
        	 public void valueChange(ValueChangeEvent event) {
        		 if(categoryType.getValue() == "Empresa")
        		 {
        			 isRRHH.setValue("Material");
 					enablePanelProject(false);
        		 }
 				else
 					enablePanelProject(true);        		 	
             }
        });
        
        optCurrency.addValueChangeListener(new ValueChangeListener() {
			
			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				if(optCurrency.getValue() == "Dolares"){
					txtTypeExchange.setVisible(true);
				}else{
					txtTypeExchange.setVisible(false);
				}
			}
		});
		
		btnCreate.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				btnCreate.setEnabled(false);
				txtDescription.setValidationVisible(true);
				txtAmount.setValidationVisible(true);	
				txtTypeExchange.setValidationVisible(true);	
				cboProject.setValidationVisible(true);
				boolean valid = true;
				
				
				if(!txtAmount.isValid() || !txtDescription.isValid() || !createdDateTimeField.isValid() || categoryType.getValue() == "Proyecto" && !cboProject.isValid()||(optCurrency.getValue() == "Dolares" && !txtTypeExchange.isValid())){
					txtAmount.setRequiredError("Es requerido");
					txtDescription.setRequiredError("Es requerido");
					txtAmount.setConversionError("Debe ser numérico");
					createdDateTimeField.setRequiredError("Es requerido");
					cboProject.setRequiredError("Es requerido");
					txtTypeExchange.setRequiredError("Es requerido");
					txtTypeExchange.setConversionError("Debe ser numérico");
					valid = false;
				}
				
			
				
				if(valid){					
					Category category = new Category();
					category.setDescription(txtDescription.getValue());					
					
					if (categoryType.getValue().equals("Empresa")) {
						category.setCategoryTypeId(1);
					} else if (categoryType.getValue().equals("Proyecto")) {
						category.setCategoryTypeId(2);
						category.setProjectId((Integer)cboProject.getValue());
					}				
										
					if(isRRHH.getValue() == "Material")
						category.setIsRRHH(false);
					else
						category.setIsRRHH(true);
					
					category.setCreatedDateTimeUTC(createdDateTimeField.getValue());
					
					if(optCurrency.getValue() == "Pesos")
					{
						category.setAmountPeso((Double)(txtAmount.getConvertedValue()));
						category.setIsCurrencyDollar(false);
					}
					else
					{
						category.setAmountDollar((Double)(txtAmount.getConvertedValue()));
						category.setTypeExchange((Double)(txtTypeExchange.getConvertedValue()));
						category.setIsCurrencyDollar(true);
					}					
					
					boolean result = CategoryController.createCategory(category);
					
					if(result)
					{
						new PopupWindow("AVISO", "Rubro creado correctamente");
						
						cleanInputs();
					}
				}

				btnCreate.setEnabled(true);
			}
		});
		
		btnCancel.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				getUI().getNavigator().navigateTo(WebvaadinUI.MAINMENU);
			}
		});
		// TODO add user code here
	}
	
	public void buildProjectCombo(){
		Collection<Project> projects = ProjectController.getProjects();
		
		cboProject.removeAllItems();
		if(projects != null && projects.size() > 0){					
			for (Project project : projects) {
				cboProject.addItem(project.getId());
				cboProject.setItemCaption(project.getId(), project.getName());
			}			
		}			
	}

		
	@Override
	public void enter(ViewChangeEvent event) {
		super.enter(event);
		if(RequestContext.getRequestContext() != null){
			// Compruebo si el usuario es de tipo socio
			if(RequestContext.getRequestContext().getUserType() != 2){
				getUI().getNavigator().navigateTo(WebvaadinUI.MAINMENU);
			}			
			txtDescription.setValue("");
			txtAmount.setValue("");
			txtTypeExchange.setValue("");
			btnCreate.setEnabled(true);			
			categoryType.select("Empresa");
			isRRHH.select("Material");
			txtTypeExchange.setVisible(false);
			cboProject.setVisible(false);
			
			cleanInputs();
		}
	}
	
	void cleanInputs()
	{
		txtDescription.clear();
		txtAmount.clear();
		txtTypeExchange.clear();
		txtDescription.setValidationVisible(false);
		cboProject.setValidationVisible(false);
		txtAmount.setValidationVisible(false);	
		txtTypeExchange.setValidationVisible(false);
		enablePanelProject(false);
		categoryType.select("Empresa");
		optCurrency.select("Pesos");
		txtTypeExchange.setVisible(false);
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("1000px");
		mainLayout.setHeight("540px");
		
		// top-level component properties
		setWidth("1000px");
		setHeight("540px");
		
		// label_1
		lblTitle = new Label();
		lblTitle.setStyleName("titleLabel");
		lblTitle.setImmediate(false);
		lblTitle.setWidth("-1px");
		lblTitle.setHeight("-1px");
		lblTitle.setValue("Crear rubro");
		mainLayout.addComponent(lblTitle, "top:42.0px;left:0.0px;");
		
		// txtDescription
		txtDescription = new TextField();
		txtDescription.setCaption("Descripción");
		txtDescription.setImmediate(true);
		txtDescription.setWidth("240px");
		txtDescription.setHeight("-1px");
		txtDescription.setTabIndex(1);
		txtDescription.setRequired(true);
		mainLayout.addComponent(txtDescription, "top:116.0px;left:0.0px;");
		
		//optCurrency
		optCurrency = new OptionGroup();
		optCurrency.setCaption("Moneda");
		optCurrency.setImmediate(true);
		optCurrency.setWidth("-1px");
		optCurrency.setHeight("-1px");
		mainLayout.addComponent(optCurrency,"top:180.0px;right:372.0px;left:3.0px;");
	
		//txtTypeExchange
		txtTypeExchange = new TextField();
		txtTypeExchange.setCaption("Tipo de cambio");
		txtTypeExchange.setImmediate(true);
		txtTypeExchange.setWidth("110px");
		txtTypeExchange.setHeight("-1px");
		txtTypeExchange.setRequired(true);
		txtTypeExchange.setNullRepresentation("");
		txtTypeExchange.setConverter(new StringToDoubleConverter());
		mainLayout.addComponent(txtTypeExchange,
				"top:200.0px;right:372.0px;left:130.0px;");
		
		// txtAmount
		txtAmount = new TextField();
		txtAmount.setCaption("Importe");
		txtAmount.setImmediate(true);
		txtAmount.setWidth("240px");
		txtAmount.setHeight("-1px");
		txtAmount.setTabIndex(2);
		txtAmount.setRequired(true);
		txtAmount.setNullRepresentation("");
		txtAmount.setConverter(new StringToDoubleConverter());
		mainLayout.addComponent(txtAmount,
				"top:263.0px;right:372.0px;left:3.0px;");
		
		// categoryType
		categoryType = new OptionGroup();
		categoryType.setCaption("Asociado a");
		categoryType.setImmediate(true);
		categoryType.setWidth("-1px");
		categoryType.setHeight("-1px");
		mainLayout.addComponent(categoryType, "top:400.0px;left:0.0px;");
		
		// btnCreate
		btnCreate = new Button();
		btnCreate.setCaption("Crear");
		btnCreate.setImmediate(true);
		btnCreate.setWidth("120px");
		btnCreate.setHeight("-1px");
		btnCreate.setTabIndex(3);
		mainLayout.addComponent(btnCreate,
				"top:474.0px;right:500.0px;left:0.0px;");
		
		// btnCancel
		btnCancel = new Button();
		btnCancel.setCaption("Cancelar");
		btnCancel.setImmediate(true);
		btnCancel.setWidth("120px");
		btnCancel.setHeight("-1px");
		btnCancel.setTabIndex(4);
		mainLayout.addComponent(btnCancel,
				"top:474.0px;right:340.0px;left:140.0px;");
		
		// popupDateField_1
		createdDateTimeField = new PopupDateField();
		createdDateTimeField.setCaption("Fecha");
		createdDateTimeField.setImmediate(true);
		createdDateTimeField.setWidth("140px");
		createdDateTimeField.setHeight("-1px");
		createdDateTimeField.setRequired(true);
		createdDateTimeField.setDateFormat("MM-yyyy");
		createdDateTimeField.setValue(new Date());
		createdDateTimeField.setResolution(Resolution.MONTH);
		mainLayout.addComponent(createdDateTimeField,
				"top:330.0px;right:513.0px;left:3.0px;");
		
		// isRRHH
		isRRHH = new OptionGroup();
		isRRHH.setCaption("Tipo de recurso");
		isRRHH.setImmediate(false);
		isRRHH.setVisible(true);
		isRRHH.setWidth("-1px");
		isRRHH.setHeight("-1px");
		mainLayout.addComponent(isRRHH, "top:400.0px;left:130.0px;");
		
		
		//cboProject
		cboProject = new ComboBox();
		cboProject.setImmediate(true);
		cboProject.setWidth("275px");
		cboProject.setHeight("-1px");
		cboProject.setCaption("Proyecto");
		cboProject.setInputPrompt("Seleccione el proyecto");
		cboProject.setNullSelectionAllowed(false);
		cboProject.setRequired(true);
		mainLayout.addComponent(cboProject, "top:116.0px;left:330.0px;");
		
		return mainLayout;
	}
	
	void enablePanelProject(boolean value) {
		cboProject.setVisible(value);		
		if(!value){
			cboProject.removeAllItems();			
		}else{
			buildProjectCombo();
		}
	}
}
