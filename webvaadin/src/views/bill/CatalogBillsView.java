package views.bill;

import java.util.Collection;
import java.util.Date;

import utils.PopupWindow;
import views.BaseView;

import com.example.webvaadin.WebvaadinUI;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.filter.SimpleStringFilter;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeListener;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.shared.ui.datefield.Resolution;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Grid;
import com.vaadin.ui.Grid.HeaderCell;
import com.vaadin.ui.Grid.HeaderRow;
import com.vaadin.ui.Grid.SelectionMode;
import com.vaadin.ui.Label;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TextField;

import controllers.BillController;
import controllers.ProjectController;
import entities.Bill;
import entities.Category;
import entities.Project;
import entities.RequestContext;

import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;

public class CatalogBillsView extends BaseView {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private CheckBox checkBoxIsLiquidated;
	@AutoGenerated
	private PopupDateField popupDateFieldTo;
	@AutoGenerated
	private PopupDateField popupDateFieldFrom;
	@AutoGenerated
	private Label lblTitle;
	private Grid billsGrid;
	private BeanItemContainer<Bill> beanContainer;
	private Label lblMessage;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CatalogBillsView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		builInputs();
		
		lblMessage = new Label("");
		mainLayout.addComponent(lblMessage, "top:183.0px;left:0.0px;");
		
		popupDateFieldFrom.addListener(new ValueChangeListener() {
		    private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				buildGrid();
			}
		});
		
		popupDateFieldTo.addListener(new ValueChangeListener() {
		    private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				buildGrid(); 
			}
		});
		
		checkBoxIsLiquidated.addListener(new ValueChangeListener() {
       	 	@Override
       	 	public void valueChange(ValueChangeEvent event) {
       	 		buildGrid();
       	 	}
       });
		
		// TODO add user code here
	}

	void builInputs()
	{
		popupDateFieldFrom.setValue(new Date());
		popupDateFieldFrom.setDateFormat("MM-yyyy");
		popupDateFieldFrom.setResolution(Resolution.MONTH);
		
		popupDateFieldTo.setValue(new Date());
		popupDateFieldTo.setDateFormat("MM-yyyy");
		popupDateFieldTo.setResolution(Resolution.MONTH);
		
		checkBoxIsLiquidated.setValue(true);
	}
	
	public void buildGrid(){
		
		int projectId = 0;
		String code = null;
		
		Collection<Bill> bills = BillController.getBills(popupDateFieldFrom.getValue(), popupDateFieldTo.getValue(), projectId, code, checkBoxIsLiquidated.getValue());
		
		if (bills != null && bills.size() > 0) {
			
			if (billsGrid != null) {
				mainLayout.removeComponent(billsGrid);
			}
			
			lblMessage.setValue("");
			
			beanContainer = new BeanItemContainer<Bill>(Bill.class,bills);
					
			billsGrid = new Grid(beanContainer);
			billsGrid.removeColumn("id");
			billsGrid.removeColumn("projectId");
			billsGrid.removeColumn("appliedDateTimeUTC");
			billsGrid.removeColumn("amountPeso");
			billsGrid.removeColumn("amountDollar");
			billsGrid.removeColumn("isCurrencyDollar");
			billsGrid.removeColumn("typeExchange");
			billsGrid.setColumnOrder("code", "description", "amountToShow", "typeExchangeToShow", "appliedDateTimeUTCToShow", "projectName");
	
			billsGrid.getColumn("code").setHeaderCaption("Código");
			billsGrid.getColumn("description").setHeaderCaption("Descripción");
			billsGrid.getColumn("amountToShow").setHeaderCaption("Monto");
			billsGrid.getColumn("typeExchangeToShow").setHeaderCaption("Tipo de cambio");
			billsGrid.getColumn("appliedDateTimeUTCToShow").setHeaderCaption("Mes");
			billsGrid.getColumn("projectName").setHeaderCaption("Proyecto");
			billsGrid.setWidth(100, Unit.PERCENTAGE);
			billsGrid.setHeight(100, Unit.PERCENTAGE);
			billsGrid.setSelectionMode(SelectionMode.NONE);
			billsGrid.getSelectedRows().clear();
			
			// Create a header row to hold column filters
			HeaderRow filterRow = billsGrid.appendHeaderRow();
			// Set up a filter for all columns
			for ( final Object pid: billsGrid.getContainerDataSource().getContainerPropertyIds()){
				HeaderCell cell = filterRow.getCell(pid);
				if(cell != null){
					TextField txtFilter = new TextField();
					txtFilter.setImmediate(true);
					txtFilter.setWidth("125px");
					txtFilter.setHeight("30px");
					txtFilter.setInputPrompt("Filtro");
					
					txtFilter.addTextChangeListener(new TextChangeListener() {	 
					  @Override
					  public void textChange(TextChangeEvent event) {
					   String newValue = (String) event.getText();
					  
					   BeanItemContainer<Category> container = ((BeanItemContainer<Category>) billsGrid.getContainerDataSource());
					  
					   container.removeContainerFilters(pid);
					   if (null != newValue && !newValue.isEmpty()) {
						   container.addContainerFilter(new SimpleStringFilter(pid, newValue, true, false));
					   }					   
					   //grid.recalculateColumnWidths();
					  }	
					 });
					cell.setComponent(txtFilter);	
				}
			}
			
			mainLayout.addComponent(billsGrid, "top:35%;left:0px;");
		}
		else
		{
			if(billsGrid != null)
			{
				billsGrid.setVisible(false);
			}
			lblMessage.setValue("No hay facturas para mostrar");
		}
	}
	
	@Override
	public void enter(ViewChangeEvent event) {
		super.enter(event);
		if(RequestContext.getRequestContext() != null){
			// Compruebo si el usuario es de tipo socio
			if(RequestContext.getRequestContext().getUserType() != 2){
				getUI().getNavigator().navigateTo(WebvaadinUI.MAINMENU);
			}
			
			builInputs();
			buildGrid();
		}
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("880px");
		mainLayout.setHeight("501px");
		
		// top-level component properties
		setWidth("880px");
		setHeight("501px");
		
		// lblTitle
		lblTitle = new Label();
		lblTitle.setStyleName("titleLabel");
		lblTitle.setImmediate(false);
		lblTitle.setWidth("-1px");
		lblTitle.setHeight("-1px");
		lblTitle.setValue("Catálogo de facturas");
		mainLayout.addComponent(lblTitle, "top:40.0px;left:0.0px;");
		
		// popupDateFieldFrom
		popupDateFieldFrom = new PopupDateField();
		popupDateFieldFrom.setCaption("Desde");
		popupDateFieldFrom.setImmediate(true);
		popupDateFieldFrom.setWidth("120px");
		popupDateFieldFrom.setHeight("-1px");
		popupDateFieldFrom.setRequired(true);
		mainLayout.addComponent(popupDateFieldFrom, "top:120.0px;left:0.0px;");
		
		// popupDateFieldTo
		popupDateFieldTo = new PopupDateField();
		popupDateFieldTo.setCaption("Hasta");
		popupDateFieldTo.setImmediate(true);
		popupDateFieldTo.setWidth("120px");
		popupDateFieldTo.setHeight("-1px");
		popupDateFieldTo.setRequired(true);
		mainLayout.addComponent(popupDateFieldTo, "top:120.0px;left:140.0px;");
		
		
		// checkBoxIsLiquidated
		checkBoxIsLiquidated = new CheckBox();
		checkBoxIsLiquidated.setCaption("Liquidado");
		checkBoxIsLiquidated.setImmediate(true);
		checkBoxIsLiquidated.setWidth("-1px");
		checkBoxIsLiquidated.setHeight("-1px");
		mainLayout.addComponent(checkBoxIsLiquidated,
				"top:128.0px;left:280.0px;");
		
		return mainLayout;
	}
}
