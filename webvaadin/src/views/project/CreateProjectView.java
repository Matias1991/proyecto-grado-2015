package views.project;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import utils.PopupWindow;
import views.BaseView;

import com.example.webvaadin.WebvaadinUI;
import com.sun.security.ntlm.Client;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.event.DataBoundTransferable;
import com.vaadin.event.dd.DragAndDropEvent;
import com.vaadin.event.dd.DropHandler;
import com.vaadin.event.dd.acceptcriteria.AcceptCriterion;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.AbstractSelect.AcceptItem;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.Field;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Table.TableDragMode;

import controllers.EmployeeController;
import controllers.ProjectController;
import controllers.UserController;
import entities.EmployedHours;
import entities.Employee;
import entities.Project;
import entities.RequestContext;
import entities.User;

public class CreateProjectView extends BaseView {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	
	private AbsoluteLayout mainLayout;	
	private TextArea txtDescription;	
	private TextField txtName;	
	private Label lblTitle;	
	private ComboBox cboSeller;	
	private Button btnCancel;	
	private Button btnCreate;
	private ComboBox cboManager;	
	private BeanItemContainer<EmployedHours> employedContainer;
	private BeanItemContainer<EmployedHours> employedHoursContainer;	
	private Table tblEmployed;
	private Table tblEmployedHours;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CreateProjectView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		btnCancel.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				getUI().getNavigator().navigateTo(WebvaadinUI.MAINMENU);
			}
		});
		
		btnCreate.addClickListener(new Button.ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				btnCreate.setEnabled(false);
				cboSeller.setValidationVisible(true);
				cboManager.setValidationVisible(true);
				txtName.setValidationVisible(true);
				
				
				if(!txtName.isValid() && !cboSeller.isValid() && !cboManager.isValid()){
					txtName.setRequiredError("Es requerido");
					cboSeller.setRequiredError("Es requerido");
					cboManager.setRequiredError("Es requerido");					
				}else{
					Project newProject = new Project();
					newProject.setName(txtName.getValue());
					
					User manager = new User();					
					manager.setId((Integer)cboManager.getValue());
					newProject.setManager(manager);
					
					Employee seller = new Employee();
					seller.setId((Integer)cboSeller.getValue());
					newProject.setSeller(seller);
					
					newProject.setDescription(txtDescription.getValue());
					
					List<EmployedHours> listEmployedHours = new ArrayList<EmployedHours>();
					for (Iterator i = tblEmployedHours.getItemIds().iterator(); i.hasNext();){
						listEmployedHours.add((EmployedHours)i.next());
					}					
					//newProject.setEmployedHours(listEmployedHours);		
					
				boolean result = ProjectController.createProject(newProject, listEmployedHours);
					
				if(result){
					new PopupWindow("AVISO", "Proyecto creado correctamente");				
				}
			}

			btnCreate.setEnabled(true);		
				
			}
		});
	}
	
	
	
	@Override
	public void enter(ViewChangeEvent event) {
		super.enter(event);		
		if(RequestContext.getRequestContext() != null){
			// Compruebo si el usuario es de tipo socio
			if(RequestContext.getRequestContext().getUserType() != 2){
				getUI().getNavigator().navigateTo(WebvaadinUI.MAINMENU);
			}			
		}
		if(tblEmployed != null){
			mainLayout.removeComponent(tblEmployed);
		}
		if(tblEmployedHours != null){
			mainLayout.removeComponent(tblEmployedHours);
		}
		
		buildTables();
		loadComboBoxes();
		
	}
	
	private void buildTables(){
		//tblEmployed		
		employedContainer = new BeanItemContainer<EmployedHours>(EmployedHours.class,EmployeeController.GetEmployedHours());
		tblEmployed = new Table("Empleados", employedContainer);
		tblEmployed.setWidth("300px");
		tblEmployed.setHeight("200px");
		tblEmployed.setVisibleColumns("name","lastName","hours");
		tblEmployed.setColumnHeaders("Nombre","Apellido","Horas");		
		tblEmployed.setDragMode(TableDragMode.ROW);			
		
		
		mainLayout.addComponent(tblEmployed, "top:116.0px;left:575.0px;");
		
		//tblEmployedHours
		Collection<EmployedHours> employedHoursCollection = null;
		employedHoursContainer = new BeanItemContainer<EmployedHours>(EmployedHours.class,employedHoursCollection);
		tblEmployedHours = new Table("Cantidad Horas",employedHoursContainer);
		tblEmployedHours.setWidth("300px");
		tblEmployedHours.setHeight("200px");	
		tblEmployedHours.setVisibleColumns("name","lastName","hours");
		tblEmployedHours.setColumnHeaders("Nombre","Apellido","Horas");
		
	    tblEmployedHours.setTableFieldFactory(new TableFieldFactory() {
            @Override
            public Field createField(Container container, Object itemId, Object propertyId, Component uiContext) {
               if (propertyId.toString().equals("hours")) {
            	   TextField aux = new TextField();
            	   aux.setWidth("60px");
                   return aux;
                }                               
                return null;
            }				
        });
        tblEmployedHours.setEditable(true);
	    	
		
		tblEmployedHours.setDragMode(TableDragMode.ROW);
		
		mainLayout.addComponent(tblEmployedHours, "top:116.0px;left:260.0px;");
		
		tblEmployedHours.setDropHandler(new DropHandler() {
			
			@Override
			public AcceptCriterion getAcceptCriterion() {
				// TODO Auto-generated method stub
				return AcceptItem.ALL;
			}
			
			@Override
			public void drop(DragAndDropEvent event) {
				// TODO Auto-generated method stub
				final DataBoundTransferable t = (DataBoundTransferable)event.getTransferable();
				Object ItemId = (Object)t.getItemId();
				employedContainer.removeItem(ItemId);
				employedHoursContainer.addItem(ItemId);
			}
		});
		
		tblEmployed.setDropHandler(new DropHandler() {
			
			@Override
			public AcceptCriterion getAcceptCriterion() {
				// TODO Auto-generated method stub
				return AcceptItem.ALL;
			}
			
			@Override
			public void drop(DragAndDropEvent event) {
				// TODO Auto-generated method stub
				final DataBoundTransferable t = (DataBoundTransferable)event.getTransferable();
				Object ItemId = (Object)t.getItemId();
				employedContainer.addItem(ItemId);
				employedHoursContainer.removeItem(ItemId);
			}
		});

	}
	
	private void loadComboBoxes(){
		Collection<Employee> sellers = EmployeeController.GetEmployees();
		
		cboSeller.removeAllItems();
		if(sellers != null && sellers.size() >0){
			for(Employee employee : sellers){
				cboSeller.addItem(employee.getId());
				cboSeller.setItemCaption(employee.getId(),employee.getName()+" " +employee.getLastName());
			}
		}
				
		Collection<User> managers = UserController.getUsersByType(3);
		
		cboManager.removeAllItems();
		if(managers != null && managers.size()>0){
			for(User user : managers){
				cboManager.addItem(user.getId());
				cboManager.setItemCaption(user.getId(), user.getName()+" " +user.getLastName());
			}
		}
		
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("1000px");
		mainLayout.setHeight("540px");
		
		// top-level component properties
		setWidth("1000px");
		setHeight("540px");
		
		// lblTitle
		lblTitle = new Label();
		lblTitle.setStyleName("titleLabel");
		lblTitle.setImmediate(false);
		lblTitle.setWidth("-1px");
		lblTitle.setHeight("-1px");
		lblTitle.setValue("Crear proyecto");
		mainLayout.addComponent(lblTitle, "top:42.0px;left:0.0px;");
		
		// btnCreate
		btnCreate = new Button();
		btnCreate.setCaption("Crear");
		btnCreate.setImmediate(true);
		btnCreate.setWidth("120px");
		btnCreate.setHeight("-1px");
		btnCreate.setTabIndex(3);
		mainLayout.addComponent(btnCreate,"top:474.0px;right:500.0px;left:0.0px;");
		
		// btnCancel
		btnCancel = new Button();
		btnCancel.setCaption("Cancelar");
		btnCancel.setImmediate(true);
		btnCancel.setWidth("120px");
		btnCancel.setHeight("-1px");
		btnCancel.setTabIndex(4);
		mainLayout.addComponent(btnCancel,"top:474.0px;right:340.0px;left:140.0px;");

		// txtName
		txtName = new TextField();
		txtName.setCaption("Nombre");
		txtName.setImmediate(true);
		txtName.setWidth("240px");
		txtName.setHeight("-1px");
		txtName.setTabIndex(1);
		txtName.setRequired(true);
		mainLayout.addComponent(txtName, "top:116.0px;left:0.0px;");
		
	
		// txtDescription
		txtDescription = new TextArea();
		txtDescription.setCaption("Descripción");
		txtDescription.setImmediate(true);
		txtDescription.setWidth("240px");
		txtDescription.setHeight("-1px");
		txtDescription.setMaxLength(240);
		mainLayout.addComponent(txtDescription, "top:180.0px;right:372.0px;left:3.0px;");
		
		//cboSeller
		cboSeller = new ComboBox();
		cboSeller.setImmediate(true);
		cboSeller.setWidth("240px");
		cboSeller.setHeight("-1px");
		cboSeller.setCaption("Vendedor");
		cboSeller.setInputPrompt("Seleccione el vendedor");
		cboSeller.setNullSelectionAllowed(false);
		cboSeller.setRequired(true);
		mainLayout.addComponent(cboSeller, "top:345.0px;right:372.0px;left:3.0px;");
		
		//cboManager
		cboManager = new ComboBox();
		cboManager.setImmediate(true);
		cboManager.setWidth("240px");
		cboManager.setHeight("-1px");
		cboManager.setCaption("Gerente");
		cboManager.setInputPrompt("Seleccione el gerente");
		cboManager.setNullSelectionAllowed(true);		
		mainLayout.addComponent(cboManager, "top:410.0px;right:372.0px;left:3.0px;");
		
		
		
		
		
		return mainLayout;
	}

}
