package views.project;

import java.util.Collection;

import views.BaseView;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.filter.SimpleStringFilter;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeListener;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Grid;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Grid.HeaderCell;
import com.vaadin.ui.Grid.HeaderRow;
import com.vaadin.ui.Grid.SelectionMode;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import controllers.BillController;
import controllers.CategoryController;
import controllers.ProjectController;
import entities.Bill;
import entities.Category;
import entities.Project;
import entities.ProjectEmployed;
import entities.ProjectPartner;
import entities.RequestContext;

public class CatalogProjectView extends BaseView {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Label lblTitle;
	private TabSheet tabProject;
	private TextArea txtDescription;
	private TextField txtSeller;
	private TextField txtManager;
	private TextField txtStatus;
	private TextField txtDist1;
	private TextField txtDist2;
	private TextField txtPart1;
	private TextField txtPart2;
	private Label lblCategoriesEmpty;
	private Label lblBillsEmpty;
	private Label lblEmployeesEmpty;
	private ComboBox comboProject;
	private Grid billGrid;
	private Grid employeesGrid;
	private Grid categoriesGrid;
	private VerticalLayout vlCategories;
	private VerticalLayout vlbBills;
	private VerticalLayout vlbEmployees;
	private Label lblMessage;

	public CatalogProjectView() {

		buildMainLayout();
		setCompositionRoot(mainLayout);
		buildTabSeet();
		
		lblMessage = new Label("");
		mainLayout.addComponent(lblMessage, "top:20%;left:0.0px;");	

		comboProject.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (comboProject.getValue() != null) {
					tabProject.setVisible(true);
					loadProject(Integer.parseInt(comboProject.getValue()
							.toString()));
				} else {
					cleanTabProject();
				}
			}
		});
	}

	@Override
	public void enter(ViewChangeEvent event) {
		super.enter(event);
		if (RequestContext.getRequestContext() != null) {

			Collection<Project> projects = ProjectController.getProjects();
			comboProject.removeAllItems();
			comboProject.clear();
			if(projects.size() != 0){
				comboProject.setVisible(true);
				tabProject.setVisible(true);
				lblMessage.setValue("");
				
				for (Project project : projects) {
					comboProject.addItem(project.getId());
					comboProject.setItemCaption(project.getId(), project.getName());
				}
				setReadOnlyTxt(true);
				if (categoriesGrid != null) {
					vlCategories.removeComponent(categoriesGrid);
				}
				if (billGrid != null) {
					vlbBills.removeComponent(billGrid);
				}
				if (employeesGrid != null) {
					vlbEmployees.removeComponent(employeesGrid);
				}
				cleanTabProject();
			} else {
				comboProject.setVisible(false);
				tabProject.setVisible(false);	
				lblMessage.setValue("No hay proyectos para mostrar");		
			}
				
		}

	}

	private void buildTabSeet() {

		tabProject.setVisible(true);

		// Descripción
		txtDescription = new TextArea();
		txtDescription.setCaption("Descripción");
		txtDescription.setImmediate(false);
		txtDescription.setReadOnly(true);
		txtDescription.setWidth("390px");
		txtDescription.setHeight("-1px");
		txtDescription.setRows(4);
		txtDescription.setNullRepresentation("");

		// Vendedor
		txtSeller = new TextField();
		txtSeller.setCaption("Vendedor");
		txtSeller.setImmediate(false);
		txtSeller.setReadOnly(true);
		txtSeller.setWidth("390px");
		txtSeller.setHeight("-1px");

		// Gerente
		txtManager = new TextField();
		txtManager.setCaption("Gerente");
		txtManager.setImmediate(false);
		txtManager.setReadOnly(true);
		txtManager.setWidth("390px");
		txtManager.setHeight("-1px");

		// Estado
		txtStatus = new TextField();
		txtStatus.setCaption("Estado");
		txtStatus.setImmediate(false);
		txtStatus.setReadOnly(true);
		txtStatus.setWidth("390px");
		txtStatus.setHeight("-1px");

		// Distribucion socio 1
		txtDist1 = new TextField();
		txtDist1.setCaption("Distribución ganancias");
		txtDist1.setImmediate(false);
		txtDist1.setReadOnly(true);
		txtDist1.setWidth("-1px");
		txtDist1.setHeight("-1px");

		// Distribucion socio 2
		txtDist2 = new TextField();
		txtDist2.setCaption("Distribución ganancias");
		txtDist2.setImmediate(false);
		txtDist2.setReadOnly(true);
		txtDist2.setWidth("-1px");
		txtDist2.setHeight("-1px");

		// Socio 1
		txtPart1 = new TextField();
		txtPart1.setCaption("Socio");
		txtPart1.setImmediate(false);
		txtPart1.setReadOnly(true);
		txtPart1.setWidth("-1px");
		txtPart1.setHeight("-1px");

		// Socio 2
		txtPart2 = new TextField();
		txtPart2.setCaption("Socio");
		txtPart2.setImmediate(false);
		txtPart2.setReadOnly(true);
		txtPart2.setWidth("-1px");
		txtPart2.setHeight("-1px");

		lblCategoriesEmpty = new Label();
		lblCategoriesEmpty.setCaption("No tiene rubros asociados");
		lblCategoriesEmpty.setImmediate(false);
		lblCategoriesEmpty.setWidth("-1px");
		lblCategoriesEmpty.setHeight("-1px");

		lblBillsEmpty = new Label();
		lblBillsEmpty.setCaption("No tiene facturas asociadas");
		lblBillsEmpty.setImmediate(false);
		lblBillsEmpty.setWidth("-1px");
		lblBillsEmpty.setHeight("-1px");

		lblEmployeesEmpty = new Label();
		lblEmployeesEmpty.setCaption("No tiene empleados asociados");
		lblEmployeesEmpty.setImmediate(false);
		lblEmployeesEmpty.setWidth("-1px");
		lblEmployeesEmpty.setHeight("-1px");

		// Tab datos
		GridLayout tab1 = new GridLayout(1, 4);
		tab1.setSpacing(true);
		tab1.addComponent(txtDescription, 0, 0);
		tab1.addComponent(txtSeller, 0, 1);
		tab1.addComponent(txtManager, 0, 2);
		tab1.addComponent(txtStatus, 0, 3);
		tabProject.addTab(tab1, "Datos básicos");

		// Distribucion
		GridLayout distribution = new GridLayout(2, 2);
		distribution.setSpacing(true);
		distribution.addComponent(txtDist1, 0, 1);
		distribution.addComponent(txtPart1, 0, 0);
		distribution.addComponent(txtDist2, 1, 1);
		distribution.addComponent(txtPart2, 1, 0);
		tabProject.addTab(distribution, "Distribución");

		// Rubros
		vlCategories = new VerticalLayout();
		vlCategories.setSpacing(true);
		vlCategories.addComponent(lblCategoriesEmpty);
		tabProject.addTab(vlCategories, "Rubros");

		// Facturas
		vlbBills = new VerticalLayout();
		vlbBills.setSpacing(true);
		vlbBills.addComponent(lblBillsEmpty);
		tabProject.addTab(vlbBills, "Facturas");

		// Empleados
		vlbEmployees = new VerticalLayout();
		vlbEmployees.setSpacing(true);
		vlbEmployees.addComponent(lblEmployeesEmpty);
		tabProject.addTab(vlbEmployees, "Empleados");
	}

	private void loadProject(int selectedProjectId) {
		// traigo los datos del proyecto
		Project projectToShow = ProjectController.getProject(selectedProjectId);
		// seteo en readonly false, para poder cargar los datos
		setReadOnlyTxt(false);

		if (projectToShow.getDescription() != null) {
			txtDescription.setValue(projectToShow.getDescription());
		} else {
			txtDescription.setValue("");
		}

		if (projectToShow.getSeller() != null) {
			txtSeller.setValue(projectToShow.getSeller().getName() + " "
					+ projectToShow.getSeller().getLastName());
		}

		if (projectToShow.getManager() != null
				&& projectToShow.getManager().getName() != null) {
			txtManager.setValue(projectToShow.getManager().getName() + " "
					+ projectToShow.getManager().getLastName());
		} else {
			txtManager.setValue("");
		}

		if (projectToShow.getProjectPartners() != null
				&& projectToShow.getProjectPartners().size() > 1) {
			// Socio 1
			ProjectPartner partner = projectToShow.getProjectPartners().get(0);
			txtPart1.setValue(partner.getEmployedName() + " "
					+ partner.getEmployedLastName());
			txtDist1.setValue(partner.getDistributionTypeToShow());
			// Socio 2
			partner = projectToShow.getProjectPartners().get(1);
			txtPart2.setValue(partner.getEmployedName() + " "
					+ partner.getEmployedLastName());
			txtDist2.setValue(partner.getDistributionTypeToShow());
		} else {
			txtPart1.setValue("");
			txtDist1.setValue("");
			txtPart2.setValue("");
			txtDist2.setValue("");
		}
		txtStatus.setValue(projectToShow.getClosedToShow());

		/* RUBROS */
		BeanItemContainer<Category> projectCategories = new BeanItemContainer<Category>(
				Category.class,
				CategoryController.getCategoriesByProject(selectedProjectId));

		if (categoriesGrid != null)
			vlCategories.removeComponent(categoriesGrid);
		if (projectCategories.size() > 0) {
			createCategoryGrid(projectCategories);
		} else {
			vlCategories.addComponent(lblCategoriesEmpty);
		}

		/* FACTURAS */
		BeanItemContainer<Bill> projectBills = new BeanItemContainer<Bill>(
				Bill.class, BillController.getBills(selectedProjectId));
		if (billGrid != null)
			vlbBills.removeComponent(billGrid);
		if (projectBills.size() > 0) {
			createBillGrid(projectBills);
		} else {
			vlbBills.addComponent(lblBillsEmpty);
		}

		/* EMPLEADOS */
		BeanItemContainer<ProjectEmployed> employees = new BeanItemContainer<ProjectEmployed>(
				ProjectEmployed.class, projectToShow.getEmployedHours());
		if (employeesGrid != null)
			vlbEmployees.removeComponent(employeesGrid);
		if (employees.size() > 0) {
			createEmployeesGrid(employees);
		} else {
			vlbEmployees.addComponent(lblEmployeesEmpty);
		}

		setReadOnlyTxt(true);
	}

	private void createCategoryGrid(
			BeanItemContainer<Category> projectCategories) {
		if (projectCategories != null && projectCategories.size() > 0) {
			categoriesGrid = new Grid(projectCategories);
			categoriesGrid.removeColumn("id");
			categoriesGrid.removeColumn("amountPeso");
			categoriesGrid.removeColumn("amountDollar");
			categoriesGrid.removeColumn("categoryTypeId");
			categoriesGrid.removeColumn("categoryType");
			categoriesGrid.removeColumn("projectId");
			;
			categoriesGrid.removeColumn("isRRHH");
			categoriesGrid.removeColumn("createdDateTimeUTC");
			categoriesGrid.removeColumn("createDateTimeUTCToShow");
			categoriesGrid.removeColumn("projectName");
			categoriesGrid.removeColumn("currencyDollar");
			categoriesGrid.removeColumn("typeExchange");
			categoriesGrid.removeColumn("ivaTypeId");
			categoriesGrid.removeColumn("ivaTypeToShow");
			categoriesGrid.removeColumn("totalAmountToShow");
			categoriesGrid.removeColumn("categoryTypeToShow");
			categoriesGrid.removeColumn("isDollarToShow");

			categoriesGrid.setColumnOrder("description", "amountToShow",
					"typeExchangeToShow", "isRRHHToShow");

			categoriesGrid.getColumn("description").setWidth(192.05);
			categoriesGrid.getColumn("description").setHeaderCaption(
					"Descripcion");
			categoriesGrid.getColumn("amountToShow").setHeaderCaption("Monto");
			categoriesGrid.getColumn("typeExchangeToShow").setHeaderCaption(
					"Tipo de cambio");
			categoriesGrid.getColumn("isRRHHToShow").setHeaderCaption(
					"Tipo de recurso");
			categoriesGrid.setWidth(100, Unit.PERCENTAGE);
			categoriesGrid.setHeight(300, Unit.PIXELS);
			categoriesGrid.setSelectionMode(SelectionMode.SINGLE);
			categoriesGrid.getSelectedRows().clear();

			// Filtros
			HeaderRow filterRow = categoriesGrid.appendHeaderRow();

			for (final Object pid : categoriesGrid.getContainerDataSource()
					.getContainerPropertyIds()) {
				HeaderCell cell = filterRow.getCell(pid);
				if (cell != null) {
					TextField txtFilter = new TextField();
					txtFilter.setImmediate(true);
					txtFilter.setWidth("125px");
					txtFilter.setHeight("30px");
					txtFilter.setInputPrompt("Filtro");

					txtFilter.addTextChangeListener(new TextChangeListener() {
						@Override
						public void textChange(TextChangeEvent event) {
							String newValue = (String) event.getText();

							@SuppressWarnings("unchecked")
							BeanItemContainer<Category> container = ((BeanItemContainer<Category>) categoriesGrid
									.getContainerDataSource());

							container.removeContainerFilters(pid);
							if (null != newValue && !newValue.isEmpty()) {
								container
										.addContainerFilter(new SimpleStringFilter(
												pid, newValue, true, false));
							}
						}
					});
					cell.setComponent(txtFilter);
				}
			}
			vlCategories.removeComponent(lblCategoriesEmpty);
			vlCategories.addComponent(categoriesGrid);
		}
	}

	private void createBillGrid(BeanItemContainer<Bill> projectBills) {
		if (projectBills != null && projectBills.size() > 0) {
			billGrid = new Grid(projectBills);
			billGrid.removeColumn("amountChargedToShow");
			billGrid.removeColumn("amountPeso");
			billGrid.removeColumn("amountDollar");
			billGrid.removeColumn("amountReceivableToShow");
			billGrid.removeColumn("appliedDateTimeUTC");
			billGrid.removeColumn("appliedDateTimeUTCToShow");
			billGrid.removeColumn("isCurrencyDollar");
			billGrid.removeColumn("ivaType");
			billGrid.removeColumn("id");
			billGrid.removeColumn("ivaTypeToShow");
			billGrid.removeColumn("projectId");
			billGrid.removeColumn("projectName");
			billGrid.removeColumn("totalAmountToShow");
			billGrid.removeColumn("typeExchange");

			billGrid.setColumnOrder("code", "description", "amountToShow",
					"typeExchangeToShow");

			billGrid.getColumn("description").setWidth(192.05);
			billGrid.getColumn("code").setHeaderCaption("Código");
			billGrid.getColumn("description").setHeaderCaption("Descripción");
			billGrid.getColumn("amountToShow").setHeaderCaption("Importe");
			billGrid.getColumn("typeExchangeToShow").setHeaderCaption(
					"Tipo de cambio");
			billGrid.setWidth(100, Unit.PERCENTAGE);
			billGrid.setHeight(300, Unit.PIXELS);
			billGrid.setSelectionMode(SelectionMode.SINGLE);
			billGrid.getSelectedRows().clear();

			// Filtros
			HeaderRow filterRow = billGrid.appendHeaderRow();

			for (final Object pid : billGrid.getContainerDataSource()
					.getContainerPropertyIds()) {
				HeaderCell cell = filterRow.getCell(pid);
				if (cell != null) {
					TextField txtFilter = new TextField();
					txtFilter.setImmediate(true);
					txtFilter.setWidth("125px");
					txtFilter.setHeight("30px");
					txtFilter.setInputPrompt("Filtro");

					txtFilter.addTextChangeListener(new TextChangeListener() {
						@Override
						public void textChange(TextChangeEvent event) {
							String newValue = (String) event.getText();

							@SuppressWarnings("unchecked")
							BeanItemContainer<Category> container = ((BeanItemContainer<Category>) billGrid
									.getContainerDataSource());

							container.removeContainerFilters(pid);
							if (null != newValue && !newValue.isEmpty()) {
								container
										.addContainerFilter(new SimpleStringFilter(
												pid, newValue, true, false));
							}
						}
					});
					cell.setComponent(txtFilter);
				}
			}
			vlbBills.removeComponent(lblBillsEmpty);
			vlbBills.addComponent(billGrid);
		}

	}

	private void createEmployeesGrid(
			BeanItemContainer<ProjectEmployed> employees) {
		if (employees != null && employees.size() > 0) {
			employeesGrid = new Grid(employees);
			employeesGrid.removeColumn("employedId");
			employeesGrid.removeColumn("enable");
			employeesGrid.removeColumn("updatedDateTimeUTC");
			employeesGrid.removeColumn("version");

			employeesGrid.setColumnOrder("employedName", "employedLastName",
					"employedHours");

			employeesGrid.getColumn("employedName").setHeaderCaption("Nombre");
			employeesGrid.getColumn("employedLastName").setHeaderCaption(
					"Apellido");
			employeesGrid.getColumn("employedHours").setHeaderCaption(
					"Cantidad de horas");
			employeesGrid.setWidth(100, Unit.PERCENTAGE);
			employeesGrid.setHeight(300, Unit.PIXELS);
			employeesGrid.setSelectionMode(SelectionMode.SINGLE);
			employeesGrid.getSelectedRows().clear();

			// Filtros
			HeaderRow filterRow = employeesGrid.appendHeaderRow();

			for (final Object pid : employeesGrid.getContainerDataSource()
					.getContainerPropertyIds()) {
				HeaderCell cell = filterRow.getCell(pid);
				if (cell != null) {
					TextField txtFilter = new TextField();
					txtFilter.setImmediate(true);
					txtFilter.setWidth("125px");
					txtFilter.setHeight("30px");
					txtFilter.setInputPrompt("Filtro");

					txtFilter.addTextChangeListener(new TextChangeListener() {
						@Override
						public void textChange(TextChangeEvent event) {
							String newValue = (String) event.getText();

							@SuppressWarnings("unchecked")
							BeanItemContainer<Category> container = ((BeanItemContainer<Category>) employeesGrid
									.getContainerDataSource());

							container.removeContainerFilters(pid);
							if (null != newValue && !newValue.isEmpty()) {
								container
										.addContainerFilter(new SimpleStringFilter(
												pid, newValue, true, false));
							}
						}
					});
					cell.setComponent(txtFilter);
				}
			}
			vlbEmployees.removeComponent(lblEmployeesEmpty);
			vlbEmployees.addComponent(employeesGrid);
		}
	}

	private void setReadOnlyTxt(boolean readOnly) {
		txtSeller.setReadOnly(readOnly);
		txtDescription.setReadOnly(readOnly);
		txtManager.setReadOnly(readOnly);
		txtStatus.setReadOnly(readOnly);
		txtDist1.setReadOnly(readOnly);
		txtDist2.setReadOnly(readOnly);
		txtPart1.setReadOnly(readOnly);
		txtPart2.setReadOnly(readOnly);
	}

	public void cleanTabProject() {
		setReadOnlyTxt(false);
		txtSeller.clear();
		txtDescription.clear();
		txtManager.clear();
		txtStatus.clear();
		txtDist1.clear();
		txtDist2.clear();
		txtPart1.clear();
		txtPart2.clear();
		vlbBills.removeAllComponents();
		vlbBills.addComponent(lblBillsEmpty);
		vlbEmployees.removeAllComponents();
		vlbEmployees.addComponent(lblEmployeesEmpty);
		vlCategories.removeAllComponents();
		vlCategories.addComponent(lblCategoriesEmpty);
		setReadOnlyTxt(true);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("880px");
		mainLayout.setHeight("501px");

		// top-level component properties
		setWidth("880px");
		setHeight("501px");

		// lblTitle
		lblTitle = new Label();
		lblTitle.setStyleName("titleLabel");
		lblTitle.setImmediate(false);
		lblTitle.setWidth("-1px");
		lblTitle.setHeight("-1px");
		lblTitle.setValue("Catálogo de proyectos");
		mainLayout.addComponent(lblTitle, "top:42.0px;left:0.0px;");

		comboProject = new ComboBox();
		comboProject.setCaption("Proyecto");
		comboProject.setImmediate(true);
		comboProject.setWidth("240px");
		comboProject.setHeight("-1px");
		comboProject.setInputPrompt("Seleccione un proyecto");
		mainLayout.addComponent(comboProject, "top:120.0px;left:0.0px;");

		tabProject = new TabSheet();
		tabProject.setImmediate(false);
		tabProject.setWidth("600px");
		tabProject.setHeight("-1px");
		mainLayout.addComponent(tabProject, "top:90.0px;left:270.0px;");

		return mainLayout;
	}
}
