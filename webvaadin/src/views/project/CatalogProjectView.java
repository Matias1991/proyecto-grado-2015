package views.project;

import java.util.Collection;

import servicelayer.service.ServiceWebStub.VOCategory;
import servicelayer.service.ServiceWebStub.VOProject;
import views.BaseView;

import com.example.webvaadin.WebvaadinUI;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.event.SelectionEvent;
import com.vaadin.event.SelectionEvent.SelectionListener;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Grid;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Grid.SelectionMode;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;

import controllers.CategoryController;
import controllers.ProjectController;
import entities.Category;
import entities.Project;
import entities.RequestContext;

public class CatalogProjectView extends BaseView {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Label lblTitle;
	private Grid catalogProjectsGrid;
	private Grid categoriesGrid;
	private BeanItemContainer<Project> beanContainer;
	private BeanItemContainer<Category> beanCategoryContainer;
	private Label lblMessage;
	private TabSheet tabProject;
	private TextField txtDescription;
	private TextField txtSeller;
	private TextField txtManager;

	public CatalogProjectView() {
		buildMainLayout();
		buildTabSeet();
		setCompositionRoot(mainLayout);

	}

	public void buildGrid() {
		Collection<Project> projects = ProjectController.getProjects();

		if (projects != null && projects.size() > 0) {
			beanContainer = new BeanItemContainer<Project>(Project.class,
					projects);

			catalogProjectsGrid = new Grid(beanContainer);
			catalogProjectsGrid.removeColumn("id");
			catalogProjectsGrid.removeColumn("manager");
			catalogProjectsGrid.removeColumn("seller");
			catalogProjectsGrid.removeColumn("createdDateTimeUTC");
			catalogProjectsGrid.removeColumn("updatedDateTimeUTC");
			catalogProjectsGrid.removeColumn("description");
			catalogProjectsGrid.removeColumn("enabledToShow");
			catalogProjectsGrid.removeColumn("createDateTimeUTCToShow");

			catalogProjectsGrid.getColumn("name").setHeaderCaption("Nombre");
			catalogProjectsGrid.setWidth(25, Unit.PERCENTAGE);
			catalogProjectsGrid.setHeight(100, Unit.PERCENTAGE);
			catalogProjectsGrid.setSelectionMode(SelectionMode.SINGLE);
			catalogProjectsGrid.getSelectedRows().clear();
			mainLayout.addComponent(catalogProjectsGrid, "top:20%;left:0px;");

			catalogProjectsGrid.addSelectionListener(new SelectionListener() {

				@Override
				public void select(SelectionEvent event) {

					BeanItem<Project> item = beanContainer
							.getItem(catalogProjectsGrid.getSelectedRow());
					if (item != null) {
						tabProject.setVisible(true);
						loadProject(item.getBean());
					} else {
						tabProject.setVisible(false);
					}

				}

			});
		} else {
			lblMessage.setValue("No hay proyectos para mostrar");
		}
	}

	@Override
	public void enter(ViewChangeEvent event) {
		super.enter(event);
		if (RequestContext.getRequestContext() != null) {
			// Compruebo si el usuario es de tipo socio
			if (RequestContext.getRequestContext().getUserType() != 2) {
				getUI().getNavigator().navigateTo(WebvaadinUI.MAINMENU);
			}
			if (catalogProjectsGrid != null) {
				mainLayout.removeComponent(catalogProjectsGrid);
			}
			buildGrid();
			tabProject.setVisible(false);
		}

	}

	private void buildTabSeet() {
		// Descripción
		txtDescription = new TextField();
		txtDescription.setCaption("Descripción");
		txtDescription.setImmediate(false);
		txtDescription.setWidth("390px");
		txtDescription.setHeight("60px");

		// Vendedor
		txtSeller = new TextField();
		txtSeller.setCaption("Vendedor");
		txtSeller.setImmediate(false);
		txtSeller.setWidth("390px");
		txtSeller.setHeight("-1px");

		// Gerente
		txtManager = new TextField();
		txtManager.setCaption("Gerente");
		txtManager.setImmediate(false);
		txtManager.setWidth("-1px");
		txtManager.setHeight("-1px");

		// Tab datos
		GridLayout tab1 = new GridLayout(2, 5);
		tab1.setSpacing(true);
		tab1.addComponent(txtDescription, 0, 0, 1, 0);
		tab1.addComponent(txtSeller, 0, 1, 1, 1);
		tab1.addComponent(txtManager, 0, 2);
		tabProject.addTab(tab1, "Datos básicos");

		// Rubros
		 GridLayout tab2 = new GridLayout(1, 1);
		 tab2.setSpacing(true);
		 tabProject.addTab(tab2, "Rubros");
	
		// Rubros
		 GridLayout tab3 = new GridLayout(1, 1);
		 tab2.setSpacing(true);
		 
		 tabProject.addTab(tab3, "Facturas");

		// Empleados
		 GridLayout tab4 = new GridLayout(1, 1);
		 tab2.setSpacing(true);
		 
		 tabProject.addTab(tab4, "Empleados");

		tabProject.setVisible(false);
	}

	private void loadProject(Project selectedProject) {
		// seteo en readonly false, para poder cargar los datos
		setReadOnlyTxt(false);

		// txtDescription.setValue(selectedProject.getDescription());
		// txtSeller.setValue(selectedProject.getSeller().getName() + " " +
		// selectedProject.getSeller().getLastName());
		// txtManager.setValue(selectedProject.getManager().getName() + " " +
		// selectedProject.getManager().getLastName());
//		buildCategoriesProject(selectedProject.getId());

		setReadOnlyTxt(true);
	}

//	private void buildCategoriesProject(int id) {
//		// Obtengo los rubros asociados al proyecto seleccionado y creo el grid
//		Collection<Category> projectCategories = CategoryController.getCategoriesByProject(id);
//		if (projectCategories != null && projectCategories.size() > 0) {
//			lblMessage.setValue("");
//			beanCategoryContainer = new BeanItemContainer<Category>(
//					Category.class, projectCategories);
//
//			categoriesGrid = new Grid(beanContainer);
//			categoriesGrid.removeColumn("id");
//			categoriesGrid.removeColumn("projectId");
//			categoriesGrid.removeColumn("categoryTypeId");
//			categoriesGrid.removeColumn("categoryType");
//			categoriesGrid.removeColumn("createdDateTimeUTC");
//			categoriesGrid.removeColumn("isRRHH");
//			categoriesGrid.removeColumn("typeExchange");
//			categoriesGrid.removeColumn("isDollarToShow");
//			categoriesGrid.removeColumn("amountDollar");
//			categoriesGrid.removeColumn("amountPeso");
//			categoriesGrid.removeColumn("currencyDollar");
//			categoriesGrid.removeColumn("categoryTypeToShow");
//			categoriesGrid.setColumnOrder("description", "amountToShow",
//					"typeExchangeToShow", "projectName",
//					"createDateTimeUTCToShow", "isRRHHToShow");
//			categoriesGrid.getColumn("description").setHeaderCaption(
//					"Descripción");
//			categoriesGrid.getColumn("amountToShow")
//					.setHeaderCaption("Importe");
//			categoriesGrid.getColumn("projectName").setHeaderCaption(
//					"Asociado a");
//			categoriesGrid.getColumn("typeExchangeToShow").setHeaderCaption(
//					"Tipo de cambio");
//			categoriesGrid.getColumn("createDateTimeUTCToShow")
//					.setHeaderCaption("Fecha de creación");
//			categoriesGrid.getColumn("isRRHHToShow").setHeaderCaption(
//					"Tipo de recurso");
//
//			// categoriesGrid.setWidth(100, Unit.PERCENTAGE);
//			// categoriesGrid.setHeight(100, Unit.PERCENTAGE);
//			categoriesGrid.setSelectionMode(SelectionMode.SINGLE);
//			categoriesGrid.getSelectedRows().clear();
//
//		} 
//	}

	private void setReadOnlyTxt(boolean readOnly) {
		txtSeller.setReadOnly(readOnly);
		txtDescription.setReadOnly(readOnly);
		txtManager.setReadOnly(readOnly);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("880px");
		mainLayout.setHeight("501px");

		// top-level component properties
		setWidth("880px");
		setHeight("501px");

		// lblTitle
		lblTitle = new Label();
		lblTitle.setStyleName("titleLabel");
		lblTitle.setImmediate(false);
		lblTitle.setWidth("-1px");
		lblTitle.setHeight("-1px");
		lblTitle.setValue("Catálogo de proyectos");
		mainLayout.addComponent(lblTitle, "top:42.0px;left:0.0px;");

		tabProject = new TabSheet();
		tabProject.setImmediate(false);
		tabProject.setWidth("-1px");
		tabProject.setHeight("-1px");
		mainLayout.addComponent(tabProject, "top:90.0px;left:260.0px;");

		return mainLayout;
	}

}
