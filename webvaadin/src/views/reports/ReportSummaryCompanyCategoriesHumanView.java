package views.reports;

import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;

import org.dussan.vaadin.dcharts.DCharts;
import org.dussan.vaadin.dcharts.base.elements.XYaxis;
import org.dussan.vaadin.dcharts.base.elements.XYseries;
import org.dussan.vaadin.dcharts.data.DataSeries;
import org.dussan.vaadin.dcharts.data.Ticks;
import org.dussan.vaadin.dcharts.metadata.LegendPlacements;
import org.dussan.vaadin.dcharts.metadata.SeriesToggles;
import org.dussan.vaadin.dcharts.metadata.XYaxes;
import org.dussan.vaadin.dcharts.metadata.renderers.AxisRenderers;
import org.dussan.vaadin.dcharts.metadata.renderers.SeriesRenderers;
import org.dussan.vaadin.dcharts.options.Axes;
import org.dussan.vaadin.dcharts.options.Legend;
import org.dussan.vaadin.dcharts.options.Options;
import org.dussan.vaadin.dcharts.options.Series;
import org.dussan.vaadin.dcharts.options.SeriesDefaults;
import org.dussan.vaadin.dcharts.renderers.legend.EnhancedLegendRenderer;
import org.dussan.vaadin.dcharts.renderers.tick.AxisTickRenderer;

import views.BaseView;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.shared.ui.datefield.Resolution;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Table;

import controllers.CategoryController;
import controllers.LiquidationController;
import entities.Category;
import entities.CompanyLiquidation;
import entities.ProjectLiquidation;
import entities.RequestContext;

public class ReportSummaryCompanyCategoriesHumanView extends BaseView {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	private Label lblTitle;
	private Table tablePeso;
	private Table tableDollar;
	private Label lblMessage;
	private ComboBox cboxCategories;
	private Collection<Category> categories;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ReportSummaryCompanyCategoriesHumanView() {
		
		super("Reportes / Empresa", "Rubros RRHH");
		
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		lblMessage = new Label("");
		mainLayout.addComponent(lblMessage, "top:155.0px;left:0.0px;");
		
		cboxCategories.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (cboxCategories.getValue() != null) {
					int id = (int) cboxCategories.getValue();
					String description = cboxCategories.getItemCaption(id);
					
					if(tablePeso != null)
						mainLayout.removeComponent(tablePeso);
					if(tableDollar != null)
						mainLayout.removeComponent(tableDollar);
					
					tablePeso = null;
					tableDollar = null;
					
					buildTablePeso(description);
					buildTableDollar(description);
				}
			}
		});
		
		// TODO add user code here
	}
	
	DCharts buildChart(Collection<CompanyLiquidation> companyLiquidations)
	{
		DataSeries dataSeries = new DataSeries();
		
		CompanyLiquidation[] array = (CompanyLiquidation[]) Array.newInstance(CompanyLiquidation.class, companyLiquidations.size());
		companyLiquidations.toArray(array);
		
		HashMap<Integer, CompanyLiquidation> companyLiquidationsByMonth = buildCompanyLiquidacions(array);
		
		dataSeries.add(companyLiquidationsByMonth.get(1).getIVAPurchase(), 
					   companyLiquidationsByMonth.get(2).getIVAPurchase(), 
					   companyLiquidationsByMonth.get(3).getIVAPurchase(),
					   companyLiquidationsByMonth.get(4).getIVAPurchase(),
					   companyLiquidationsByMonth.get(5).getIVAPurchase(),
					   companyLiquidationsByMonth.get(6).getIVAPurchase(),
					   companyLiquidationsByMonth.get(7).getIVAPurchase(),
					   companyLiquidationsByMonth.get(8).getIVAPurchase(),
					   companyLiquidationsByMonth.get(9).getIVAPurchase(),
					   companyLiquidationsByMonth.get(10).getIVAPurchase(),
					   companyLiquidationsByMonth.get(11).getIVAPurchase(),
					   companyLiquidationsByMonth.get(12).getIVAPurchase());
		
		dataSeries.add(companyLiquidationsByMonth.get(1).getIVASale(), 
					   companyLiquidationsByMonth.get(2).getIVASale(), 
					   companyLiquidationsByMonth.get(3).getIVASale(),
					   companyLiquidationsByMonth.get(4).getIVASale(),
					   companyLiquidationsByMonth.get(5).getIVASale(),
					   companyLiquidationsByMonth.get(6).getIVASale(),
					   companyLiquidationsByMonth.get(7).getIVASale(),
					   companyLiquidationsByMonth.get(8).getIVASale(),
					   companyLiquidationsByMonth.get(9).getIVASale(),
					   companyLiquidationsByMonth.get(10).getIVASale(),
					   companyLiquidationsByMonth.get(11).getIVASale(),
					   companyLiquidationsByMonth.get(12).getIVASale());
		
		SeriesDefaults seriesDefaults = new SeriesDefaults()
			.setFillToZero(true)
			.setRenderer(SeriesRenderers.BAR);

		Series series = new Series()
			.addSeries(
				new XYseries()
					.setLabel("IVA Compra en $"))
		.addSeries(
				new XYseries()
					.setLabel("IVA Venta en $"));
		
		Legend legend = new Legend()
			.setShow(true)
			.setRendererOptions(
				new EnhancedLegendRenderer()
					.setSeriesToggle(SeriesToggles.SLOW)
					.setSeriesToggleReplot(true))
			.setPlacement(LegendPlacements.OUTSIDE_GRID);

		Axes axes = new Axes()
			.addAxis(
				new XYaxis()
					.setRenderer(AxisRenderers.CATEGORY)
					.setTicks(
		                new Ticks()
		                    .add("Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Set", "Oct", "Nov", "Dic")))
			.addAxis(
				new XYaxis(XYaxes.Y)
					.setPad(1.05f)
					.setTickOptions(
						new AxisTickRenderer()
							.setFormatString("$%d")));

		Options options = new Options()
			.setSeriesDefaults(seriesDefaults)
			.setSeries(series)
			.setLegend(legend)
			.setAxes(axes);

		return new DCharts()
			.setDataSeries(dataSeries)
			.setOptions(options)
			.show();
	}
	
	HashMap<Integer, CompanyLiquidation> buildCompanyLiquidacions(CompanyLiquidation[] companyLiquidations)
	{
		HashMap<Integer, CompanyLiquidation> companyLiquidacionByMonth = new HashMap<Integer, CompanyLiquidation>();
		companyLiquidacionByMonth.put(1, new CompanyLiquidation());
		companyLiquidacionByMonth.put(2, new CompanyLiquidation());
		companyLiquidacionByMonth.put(3, new CompanyLiquidation());
		companyLiquidacionByMonth.put(4, new CompanyLiquidation());
		companyLiquidacionByMonth.put(5, new CompanyLiquidation());
		companyLiquidacionByMonth.put(6, new CompanyLiquidation());
		companyLiquidacionByMonth.put(7, new CompanyLiquidation());
		companyLiquidacionByMonth.put(8, new CompanyLiquidation());
		companyLiquidacionByMonth.put(9, new CompanyLiquidation());
		companyLiquidacionByMonth.put(10, new CompanyLiquidation());
		companyLiquidacionByMonth.put(11, new CompanyLiquidation());
		companyLiquidacionByMonth.put(12, new CompanyLiquidation());
		
		for(int i = 0; i< companyLiquidations.length; i++)
		{
			int month = companyLiquidations[i].getAppliedDateTimeUTC().getMonth();
			companyLiquidacionByMonth.put(month, companyLiquidations[i]);
		}

		return companyLiquidacionByMonth;
	}
	
	Table buildTable(Collection<Category> categories, boolean isCurrencyDollar, String titleTable)
	{
		Table table = new Table(titleTable);
		table.addContainerProperty("Proyeto", String.class, null);
		table.addContainerProperty("Importe", String.class, null);
		table.addContainerProperty("Iva", String.class, null);
		table.addContainerProperty("Total", String.class, null);
		
		double totalAmount = 0, totalIva = 0;
		String totalAmountToShow = null, totalIvaToShow = null, totalToShow = null;
		int i = 2;
		for(Category category : categories)
		{
			String amountToShow = null, ivaToShow = null, totalRowToShow = null;
			double amount = 0;
			if(isCurrencyDollar)	
				amount = category.getAmountDollar();
			else
				amount = category.getAmountPeso();
			
			double iva = 0;
			if(category.getIvaTypeId() == 2)
			{
				iva = (amount * 0.10);
			}
			else if(category.getIvaTypeId() == 3)
			{
				iva = (amount * 0.22);
			}
			
			totalAmount += amount;
			totalIva += iva;
			
			if(isCurrencyDollar)
			{
				amountToShow = new DecimalFormat("U$S ###,###.###").format(amount);
				ivaToShow = new DecimalFormat("U$S ###,###.###").format(iva);
				totalRowToShow = new DecimalFormat("U$S ###,###.###").format(amount + iva);
			}
			else
			{
				amountToShow = new DecimalFormat("$ ###,###.###").format(amount);
				ivaToShow = new DecimalFormat("$ ###,###.###").format(iva);
				totalRowToShow = new DecimalFormat("$ ###,###.###").format(amount + iva);
			}
			
			table.addItem(new Object [] {category.getProjectName(), amountToShow, ivaToShow , totalRowToShow}, i);
			i++;
		}
		
		if(isCurrencyDollar)
		{
			totalAmountToShow = new DecimalFormat("U$S ###,###.###").format(totalAmount);
			totalIvaToShow = new DecimalFormat("U$S ###,###.###").format(totalIva);
			totalToShow = new DecimalFormat("U$S ###,###.###").format(totalAmount + totalIva);
		}
		else
		{
			totalAmountToShow = new DecimalFormat("$ ###,###.###").format(totalAmount);
			totalIvaToShow = new DecimalFormat("$ ###,###.###").format(totalIva);
			totalToShow = new DecimalFormat("$ ###,###.###").format(totalAmount + totalIva);
		}
		
		// Set the footers
		table.setFooterVisible(true);
		table.setColumnFooter("Proyeto", "Total");
		table.setColumnFooter("Importe", totalAmountToShow);
		table.setColumnFooter("Iva", totalIvaToShow);
		table.setColumnFooter("Total", totalToShow);
		
		// Adjust the table height a bit
		table.setPageLength(table.size());
		
		return table;
	}
	
	
	void buildTablePeso(String description)
	{
		//todos los rubros humanos con esa descripcion que estan en pesos
		Collection<Category> categories = CategoryController.getCategories(description, false);
		
		if(categories.size() > 0)
		{
			tablePeso = buildTable(categories, false, "Tipo de Moneda - $");
		
			tablePeso.setWidth(49, Unit.PERCENTAGE);
		
			mainLayout.addComponent(tablePeso, "top:20%;left:0px;");
		}
	}
	
	void buildTableDollar(String description)
	{
		//todos los rubros humanos con esa descripcion que estan en dolares
		Collection<Category> categories = CategoryController.getCategories(description, true);
		
		if(categories.size() > 0)
		{
			tableDollar = buildTable(categories, true, "Tipo de Moneda - U$S");
			
			tableDollar.setWidth(440, Unit.PIXELS);
			
			if(tablePeso != null)
				mainLayout.addComponent(tableDollar, "top:20%;left:50%;");
			else
				mainLayout.addComponent(tableDollar, "top:20%;left:0px;");
		}
	}
	
	@Override
	public void enter(ViewChangeEvent event) {
		super.enter(event);
		if (RequestContext.getRequestContext() != null) {
			
			HashMap<String, Category> categories_RRHH = new HashMap<String, Category>();
			
			Collection<Category> categories = CategoryController.getCategories();
			
			cboxCategories.removeAllItems();
			
			for(Category category : categories)
			{
				if(category.getIsRRHH() && !categories_RRHH.containsKey(category.getDescription()))
				{
					categories_RRHH.put(category.getDescription(), category);
					cboxCategories.addItem(category.getId());
					cboxCategories.setItemCaption(category.getId(), category.getDescription());
				}
			}
			
			if (tablePeso != null) 
				mainLayout.removeComponent(tablePeso);
			if (tableDollar != null) 
				mainLayout.removeComponent(tableDollar);
		}
	}
	
	@AutoGenerated
	private void buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("880px");
		mainLayout.setHeight("880px");
		
		// top-level component properties
		setWidth("880px");
		setHeight("880px");

		// lblTitle
		lblTitle = new Label();
		lblTitle.setStyleName("titleLabel");
		lblTitle.setImmediate(false);
		lblTitle.setWidth("-1px");
		lblTitle.setHeight("-1px");
		lblTitle.setValue(getBreadCrumbToShow());
		mainLayout.addComponent(lblTitle, "top:40.0px;left:0.0px;");
				
		// cboxCategories
		cboxCategories = new ComboBox();
		cboxCategories.setCaption("Rubro");
		cboxCategories.setImmediate(true);
		cboxCategories.setWidth("245px");
		cboxCategories.setHeight("-1px");
		cboxCategories.setRequired(true);
		cboxCategories.setInputPrompt("Seleccione el rubro");
		cboxCategories.setTabIndex(3);
		mainLayout.addComponent(cboxCategories, "top:105.0px;left:0px;");
	}

}
