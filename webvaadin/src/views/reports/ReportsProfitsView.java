package views.reports;

import java.util.Calendar;
import java.util.Collection;
import java.util.Date;

import org.dussan.vaadin.dcharts.DCharts;
import org.dussan.vaadin.dcharts.base.elements.XYaxis;
import org.dussan.vaadin.dcharts.data.DataSeries;
import org.dussan.vaadin.dcharts.data.Ticks;
import org.dussan.vaadin.dcharts.metadata.renderers.AxisRenderers;
import org.dussan.vaadin.dcharts.metadata.renderers.SeriesRenderers;
import org.dussan.vaadin.dcharts.options.Axes;
import org.dussan.vaadin.dcharts.options.Highlighter;
import org.dussan.vaadin.dcharts.options.Legend;
import org.dussan.vaadin.dcharts.options.Options;
import org.dussan.vaadin.dcharts.options.SeriesDefaults;
import org.dussan.vaadin.dcharts.renderers.label.CanvasAxisLabelRenderer;

import views.BaseView;

import com.vaadin.addon.charts.model.DataSeriesItem;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.PopupDateField;

import controllers.LiquidationController;
import entities.ProjectLiquidation;

public class ReportsProfitsView extends BaseView {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	private static final long serialVersionUID = 1L;
	private PopupDateField popupDateFieldTo;
	private PopupDateField popupDateFieldFrom;
	private Label lblTitle;
	private DCharts chartDollar;
	private DCharts chartPeso;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ReportsProfitsView() {
		
		super("Reportes", "Proyectos con mas ganancias");
		
		buildMainLayout();
		setCompositionRoot(mainLayout);

		popupDateFieldFrom.addValueChangeListener(new ValueChangeListener() {
		    private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				if(popupDateFieldFrom.getValue() != null && popupDateFieldTo.getValue() != null){
					buildChartPeso();
					buildChartDollar();
				} else {
					popupDateFieldFrom.setRequiredError("Es requerido");
				}
					
			}
		});
		
		popupDateFieldTo.addValueChangeListener(new ValueChangeListener() {
		    private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				if(popupDateFieldFrom.getValue() != null && popupDateFieldTo.getValue() != null){
					buildChartPeso();
					buildChartDollar();
				} else {
					popupDateFieldTo.setRequiredError("Es requerido");
				}
			}
		});
		
		// TODO add user code here
	}
	
	public void buildChartPeso(){
		
		if (chartPeso != null) {
			mainLayout.removeComponent(chartPeso);
		}
		
		//Charts pesos
		Collection<ProjectLiquidation> projectLiquidations = LiquidationController.getProjectsLiquidationsWithMoreEarnings(popupDateFieldFrom.getValue(), popupDateFieldTo.getValue(), false, 5);
		
		DataSeries dataSeries = new DataSeries();
		int i = 1;
		Ticks ticks = new Ticks();
		for(ProjectLiquidation projectLiquidacion : projectLiquidations)
		{
			dataSeries.add(new DataSeriesItem(i, projectLiquidacion.getEarnings()));
			ticks.add(projectLiquidacion.getProject().getName());
			i++;
		}

		SeriesDefaults seriesDefaults = new SeriesDefaults()
		    .setRenderer(SeriesRenderers.BAR);
	
		Axes axes = new Axes()
		    .addAxis(
		        new XYaxis()
		            .setRenderer(AxisRenderers.CATEGORY)
		            .setTicks(ticks));
        
		 Legend legend = new Legend().setShow(true);
		  
		Highlighter highlighter = new Highlighter().setShow(true)
                .setShowTooltip(true).setTooltipAlwaysVisible(true)
                .setKeepTooltipInsideChart(true);
	
		Options options = new Options()
		    .setSeriesDefaults(seriesDefaults)
		    .setAxes(axes)
		    .setLegend(legend)
		    .setHighlighter(highlighter);
	
		chartPeso = new DCharts()
		    .setDataSeries(dataSeries)
		    .setOptions(options)
		    .show();
		
		chartPeso.setCaption("$");
		
		chartPeso.setWidth(100, Unit.PERCENTAGE);
		chartPeso.setHeight(350, Unit.PIXELS);
		
		mainLayout.addComponent(chartPeso, "top:19%;left:0px;");
	}
	
	public void buildChartDollar(){
		
		if (chartDollar != null) {
			mainLayout.removeComponent(chartDollar);
		}
		
		//Charts pesos
		Collection<ProjectLiquidation> projectLiquidations = LiquidationController.getProjectsLiquidationsWithMoreEarnings(popupDateFieldFrom.getValue(), popupDateFieldTo.getValue(), true, 5);
		
		DataSeries dataSeries = new DataSeries();
		int i = 1;
		Ticks ticks = new Ticks();
		for(ProjectLiquidation projectLiquidacion : projectLiquidations)
		{
			dataSeries.add(new DataSeriesItem(i, projectLiquidacion.getEarnings()));
			ticks.add(projectLiquidacion.getProject().getName());
			i++;
		}

		SeriesDefaults seriesDefaults = new SeriesDefaults()
		    .setRenderer(SeriesRenderers.BAR);
	
		Axes axes = new Axes()
		    .addAxis(
		        new XYaxis()
		            .setRenderer(AxisRenderers.CATEGORY)
		            .setTicks(ticks));
		
		Legend legend = new Legend().setShow(true);
		
		Highlighter highlighter = new Highlighter().setShow(true)
                .setShowTooltip(true).setTooltipAlwaysVisible(true)
                .setKeepTooltipInsideChart(true);
	
		Options options = new Options()
		    .setSeriesDefaults(seriesDefaults)
		    .setAxes(axes)
		    .setLegend(legend)
		    .setHighlighter(highlighter);
	
		chartDollar = new DCharts()
		    .setDataSeries(dataSeries)
		    .setOptions(options)
		    .show();
		
		chartDollar.setCaption("US$");
		
		chartDollar.setWidth(100, Unit.PERCENTAGE);
		chartDollar.setHeight(350, Unit.PIXELS);
		
		mainLayout.addComponent(chartDollar, "top:60%;left:0px;");
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("880px");
		mainLayout.setHeight("880px");
		
		// top-level component properties
		setWidth("880px");
		setHeight("880px");

		// lblTitle
		lblTitle = new Label();
		lblTitle.setStyleName("titleLabel");
		lblTitle.setImmediate(false);
		lblTitle.setWidth("-1px");
		lblTitle.setHeight("-1px");
		lblTitle.setValue(getBreadCrumbToShow());
		mainLayout.addComponent(lblTitle, "top:40.0px;left:0.0px;");
				
		// popupDateFieldFrom
		popupDateFieldFrom = new PopupDateField();
		popupDateFieldFrom.setCaption("Desde");
		popupDateFieldFrom.setImmediate(true);
		popupDateFieldFrom.setWidth("120px");
		popupDateFieldFrom.setHeight("-1px");
		popupDateFieldFrom.setTabIndex(1);
		popupDateFieldFrom.setRequired(true);
		mainLayout.addComponent(popupDateFieldFrom, "top:105.0px;left:0.0px;");
		
		// popupDateFieldTo
		popupDateFieldTo = new PopupDateField();
		popupDateFieldTo.setCaption("Hasta");
		popupDateFieldTo.setImmediate(true);
		popupDateFieldTo.setWidth("120px");
		popupDateFieldTo.setHeight("-1px");
		popupDateFieldTo.setTabIndex(2);
		popupDateFieldTo.setRequired(true);
		mainLayout.addComponent(popupDateFieldTo, "top:105.0px;left:140.0px;");

		return mainLayout;
	}

}
