package views.reports;

import java.lang.reflect.Array;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;

import org.dussan.vaadin.dcharts.ChartImageFormat;
import org.dussan.vaadin.dcharts.DCharts;
import org.dussan.vaadin.dcharts.DownloadButtonLocation;
import org.dussan.vaadin.dcharts.base.elements.XYaxis;
import org.dussan.vaadin.dcharts.base.elements.XYseries;
import org.dussan.vaadin.dcharts.data.DataSeries;
import org.dussan.vaadin.dcharts.data.Ticks;
import org.dussan.vaadin.dcharts.metadata.LegendPlacements;
import org.dussan.vaadin.dcharts.metadata.SeriesToggles;
import org.dussan.vaadin.dcharts.metadata.XYaxes;
import org.dussan.vaadin.dcharts.metadata.renderers.AxisRenderers;
import org.dussan.vaadin.dcharts.metadata.renderers.SeriesRenderers;
import org.dussan.vaadin.dcharts.options.Axes;
import org.dussan.vaadin.dcharts.options.Highlighter;
import org.dussan.vaadin.dcharts.options.Legend;
import org.dussan.vaadin.dcharts.options.Options;
import org.dussan.vaadin.dcharts.options.Series;
import org.dussan.vaadin.dcharts.options.SeriesDefaults;
import org.dussan.vaadin.dcharts.renderers.label.CanvasAxisLabelRenderer;
import org.dussan.vaadin.dcharts.renderers.legend.EnhancedLegendRenderer;
import org.dussan.vaadin.dcharts.renderers.tick.AxisTickRenderer;

import views.BaseView;

import com.vaadin.addon.charts.model.DataSeriesItem;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ReadOnlyException;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.converter.Converter.ConversionException;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.PopupDateField;

import controllers.LiquidationController;
import entities.ProjectLiquidation;

public class ReportsProfitsView extends BaseView {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	private static final long serialVersionUID = 1L;
	private PopupDateField popupDateFieldTo;
	private PopupDateField popupDateFieldFrom;
	private Label lblTitle;
	private DCharts chartDollar;
	private DCharts chartPeso;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ReportsProfitsView() {
		
		super("Reportes", "Proyectos con mas ganancias");
		
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		builInputs();
		
		popupDateFieldFrom.addValueChangeListener(new ValueChangeListener() {
		    private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				if(popupDateFieldFrom.getValue() != null && popupDateFieldTo.getValue() != null){
					buildChartPeso();
					buildChartDollar();
				} else {
					popupDateFieldFrom.setRequiredError("Es requerido");
				}
					
			}
		});
		
		popupDateFieldTo.addValueChangeListener(new ValueChangeListener() {
		    private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				if(popupDateFieldFrom.getValue() != null && popupDateFieldTo.getValue() != null){
					buildChartPeso();
					buildChartDollar();
				} else {
					popupDateFieldTo.setRequiredError("Es requerido");
				}
			}
		});
		
		// TODO add user code here
	}
	
	void builInputs()
	{
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.DAY_OF_YEAR, 1);
		popupDateFieldFrom.setValue(cal.getTime());
		popupDateFieldFrom.setDateFormat("dd-MM-yyyy");
		
		popupDateFieldTo.setValue(new Date());
		popupDateFieldTo.setDateFormat("dd-MM-yyyy");
		
		buildChartPeso();
		buildChartDollar();
	}
	
	public void buildChartPeso(){
		
		if (chartPeso != null) {
			mainLayout.removeComponent(chartPeso);
		}
		
		//Charts pesos
		Collection<ProjectLiquidation> projectLiquidations = LiquidationController.getProjectsLiquidationsWithMoreEarnings(popupDateFieldFrom.getValue(), popupDateFieldTo.getValue(), false, 5);
		
		DataSeries dataSeries = new DataSeries();
		Ticks ticks = new Ticks();

		for(ProjectLiquidation projectLiquidacion : projectLiquidations)
		{
			ticks.add(projectLiquidacion.getProject().getName());
		}
		
		ProjectLiquidation[] array = (ProjectLiquidation[]) Array.newInstance(ProjectLiquidation.class, projectLiquidations.size());
		projectLiquidations.toArray(array);
		
		dataSeries.add(array[0].getEarnings(), array[1].getEarnings(), array[2].getEarnings(), array[3].getEarnings(), array[4].getEarnings());
		dataSeries.add(array[0].getEarnings(), array[1].getEarnings(), array[2].getEarnings(), array[3].getEarnings(), array[4].getEarnings());

		SeriesDefaults seriesDefaults = new SeriesDefaults()
			.setFillToZero(true)
			.setRenderer(SeriesRenderers.BAR);

		Series series = new Series()
			.addSeries(
				new XYseries()
					.setLabel("Ganacia en U$S"))
		.addSeries(
				new XYseries()
					.setLabel("Reserva en U$S"));
		
		Legend legend = new Legend()
			.setShow(true)
			.setRendererOptions(
				new EnhancedLegendRenderer()
					.setSeriesToggle(SeriesToggles.SLOW)
					.setSeriesToggleReplot(true))
			.setPlacement(LegendPlacements.OUTSIDE_GRID);

		Axes axes = new Axes()
			.addAxis(
				new XYaxis()
					.setRenderer(AxisRenderers.CATEGORY)
					.setTicks(ticks))
			.addAxis(
				new XYaxis(XYaxes.Y)
					.setPad(1.05f)
					.setTickOptions(
						new AxisTickRenderer()
							.setFormatString("U$S%d")));

		Options options = new Options()
			.setSeriesDefaults(seriesDefaults)
			.setSeries(series)
			.setLegend(legend)
			.setAxes(axes);

		chartPeso = new DCharts()
			.setDataSeries(dataSeries)
			.setOptions(options)
			.show();
		
		chartPeso.setWidth(100, Unit.PERCENTAGE);
		chartPeso.setHeight(350, Unit.PIXELS);
		
		mainLayout.addComponent(chartPeso, "top:19%;left:0px;");
	}
	
	public void buildChartDollar(){
		
		if (chartDollar != null) {
			mainLayout.removeComponent(chartDollar);
		}
		
		//Charts dolares
		Collection<ProjectLiquidation> projectLiquidations = LiquidationController.getProjectsLiquidationsWithMoreEarnings(popupDateFieldFrom.getValue(), popupDateFieldTo.getValue(), true, 5);	
				
		DataSeries dataSeries = new DataSeries();
		Ticks ticks = new Ticks();

		for(ProjectLiquidation projectLiquidacion : projectLiquidations)
		{
			ticks.add(projectLiquidacion.getProject().getName());
		}
		
		ProjectLiquidation[] array = (ProjectLiquidation[]) Array.newInstance(ProjectLiquidation.class, projectLiquidations.size());
		projectLiquidations.toArray(array);
		
		dataSeries.add(array[0].getEarnings(), array[1].getEarnings(), array[2].getEarnings(), array[3].getEarnings(), array[4].getEarnings());
		dataSeries.add(array[0].getReserve(), array[1].getReserve(), array[2].getReserve(), array[3].getReserve(), array[4].getReserve());

		SeriesDefaults seriesDefaults = new SeriesDefaults()
			.setFillToZero(true)
			.setRenderer(SeriesRenderers.BAR);

		Series series = new Series()
			.addSeries(
				new XYseries()
					.setLabel("Ganacia en $"))
		.addSeries(
				new XYseries()
					.setLabel("Reserva en $"));
		
		Legend legend = new Legend()
			.setShow(true)
			.setRendererOptions(
				new EnhancedLegendRenderer()
					.setSeriesToggle(SeriesToggles.SLOW)
					.setSeriesToggleReplot(true))
			.setPlacement(LegendPlacements.OUTSIDE_GRID);

		Axes axes = new Axes()
			.addAxis(
				new XYaxis()
					.setRenderer(AxisRenderers.CATEGORY)
					.setTicks(ticks))
			.addAxis(
				new XYaxis(XYaxes.Y)
					.setPad(1.05f)
					.setTickOptions(
						new AxisTickRenderer()
							.setFormatString("$%d")));

		Options options = new Options()
			.setSeriesDefaults(seriesDefaults)
			.setSeries(series)
			.setLegend(legend)
			.setAxes(axes);

		chartDollar = new DCharts()
			.setDataSeries(dataSeries)
			.setOptions(options)
			.show();
		
		chartDollar.setWidth(100, Unit.PERCENTAGE);
		chartDollar.setHeight(350, Unit.PIXELS);
		
		mainLayout.addComponent(chartDollar, "top:60%;left:0px;");
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("880px");
		mainLayout.setHeight("880px");
		
		// top-level component properties
		setWidth("880px");
		setHeight("880px");

		// lblTitle
		lblTitle = new Label();
		lblTitle.setStyleName("titleLabel");
		lblTitle.setImmediate(false);
		lblTitle.setWidth("-1px");
		lblTitle.setHeight("-1px");
		lblTitle.setValue(getBreadCrumbToShow());
		mainLayout.addComponent(lblTitle, "top:40.0px;left:0.0px;");
				
		// popupDateFieldFrom
		popupDateFieldFrom = new PopupDateField();
		popupDateFieldFrom.setCaption("Desde");
		popupDateFieldFrom.setImmediate(true);
		popupDateFieldFrom.setWidth("140px");
		popupDateFieldFrom.setHeight("-1px");
		popupDateFieldFrom.setTabIndex(1);
		popupDateFieldFrom.setRequired(true);
		mainLayout.addComponent(popupDateFieldFrom, "top:105.0px;left:0.0px;");
		
		// popupDateFieldTo
		popupDateFieldTo = new PopupDateField();
		popupDateFieldTo.setCaption("Hasta");
		popupDateFieldTo.setImmediate(true);
		popupDateFieldTo.setWidth("140px");
		popupDateFieldTo.setHeight("-1px");
		popupDateFieldTo.setTabIndex(2);
		popupDateFieldTo.setRequired(true);
		mainLayout.addComponent(popupDateFieldTo, "top:105.0px;left:160.0px;");

		return mainLayout;
	}

}
