package views.reports;

import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;

import views.BaseView;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.shared.ui.datefield.Resolution;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Table;

import controllers.BillController;
import entities.Bill;
import entities.Category;
import entities.ReportAmountCharged;
import entities.RequestContext;

public class ReportProjectDetailsAmountChargedView extends BaseView {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	private PopupDateField popupDateFieldYear;
	private Label lblTitle;
	private Label lblMessage;
	private Table tablePeso;
	private Table tableDollar;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ReportProjectDetailsAmountChargedView() {
		
		super("Reportes", "Importes a cobrar");
		
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		lblMessage = new Label("");
		mainLayout.addComponent(lblMessage, "top:155.0px;left:0.0px;");
		
		popupDateFieldYear.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (popupDateFieldYear.getValue() != null) {
					buildTables();
				}
			}
		});
	}
	
	void buildInputs()
	{
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.DAY_OF_YEAR, 1);
		popupDateFieldYear.setValue(cal.getTime());
		popupDateFieldYear.setDateFormat("yyyy");
		popupDateFieldYear.setResolution(Resolution.YEAR);
	}

	void buildTables()
	{
		if(tablePeso != null)
			mainLayout.removeComponent(tablePeso);
		if(tableDollar != null)
			mainLayout.removeComponent(tableDollar);
		
		tablePeso = null;
		tableDollar = null;
		
		boolean buildTablePeso = buildTablePeso();
		boolean buildTableDollar = buildTableDollar();
		if(!buildTablePeso && !buildTableDollar)
			lblMessage.setValue("No hay datos en el año seleccionado para mostrar");
		else
			lblMessage.setValue("");
	}
	
	boolean buildTablePeso()
	{
		HashMap<Integer, ReportAmountCharged> bills = buildReport(BillController.getAllBillsByYear(popupDateFieldYear.getValue(), false));
		
		if(bills.size() > 0)
		{
			tablePeso = buildTable(bills, false, "Tipo de Moneda - $");
		
			tablePeso.setWidth(100, Unit.PERCENTAGE);
		
			mainLayout.addComponent(tablePeso, "top:20%;left:0px;");
			
			return true;
		}
		else
			return false;
	}
	
	boolean buildTableDollar()
	{
		HashMap<Integer, ReportAmountCharged> bills = buildReport(BillController.getAllBillsByYear(popupDateFieldYear.getValue(), true));

		if(bills.size() > 0)
		{
			tableDollar = buildTable(bills, true, "Tipo de Moneda - U$S");
		
			tableDollar.setWidth(100, Unit.PERCENTAGE);
			
			if(tablePeso != null)
				mainLayout.addComponent(tableDollar, "top:77%;left:0px;");
			else
				mainLayout.addComponent(tableDollar, "top:20%;left:0px;");
			
			return true;
		}
		else
			return false;
	}
	
	Table buildTable(HashMap<Integer, ReportAmountCharged> result, boolean isCurrencyDollar, String titleTable)
	{
		Table table = new Table(titleTable);
		table.addContainerProperty("Proyecto", String.class, null);
		table.addContainerProperty("Importe cobrado", String.class, null);
		table.addContainerProperty("Importe a cobrar", String.class, null);
		table.addContainerProperty("Facturación IVA incl.", String.class, null);
		
		double totalAmount = 0, totalAmountCharged = 0, totalAmountReceivable = 0;
		String totalAmountToShow = null, totalAmountChargedToShow = null, totalAmountReceivableToShow = null;
		int i = 2;
		for(ReportAmountCharged value : result.values())
		{
			String amountToShow = null, amountChargedToShow = null, amountReceivableToShow = null;

			totalAmount += value.getTotalAmount();
			totalAmountCharged += value.getAmountCharged();
			totalAmountReceivable += value.getAmountReceivable();
			
			if(isCurrencyDollar)
			{
				amountToShow = new DecimalFormat("U$S ###,###.###").format(value.getTotalAmount());
				amountChargedToShow = new DecimalFormat("U$S ###,###.###").format(value.getAmountCharged());
				amountReceivableToShow = new DecimalFormat("U$S ###,###.###").format(value.getAmountReceivable());
			}
			else
			{
				amountToShow = new DecimalFormat("$ ###,###.###").format(value.getTotalAmount());
				amountChargedToShow = new DecimalFormat("$ ###,###.###").format(value.getAmountCharged());
				amountReceivableToShow = new DecimalFormat("$ ###,###.###").format(value.getAmountReceivable());
			}
			
			table.addItem(new Object [] {value.getProjectName(), amountChargedToShow, amountReceivableToShow , amountToShow}, i);
			i++;
		}
		
		if(isCurrencyDollar)
		{
			totalAmountToShow = new DecimalFormat("U$S ###,###.###").format(totalAmount);
			totalAmountChargedToShow = new DecimalFormat("U$S ###,###.###").format(totalAmountCharged);
			totalAmountReceivableToShow = new DecimalFormat("U$S ###,###.###").format(totalAmountReceivable);
		}
		else
		{
			totalAmountToShow = new DecimalFormat("$ ###,###.###").format(totalAmount);
			totalAmountChargedToShow = new DecimalFormat("$ ###,###.###").format(totalAmountCharged);
			totalAmountReceivableToShow = new DecimalFormat("$ ###,###.###").format(totalAmountReceivable);
		}
		
		// Set the footers
		table.setFooterVisible(true);
		table.setColumnFooter("Proyecto", "Total");
		table.setColumnFooter("Importe cobrado", totalAmountChargedToShow);
		table.setColumnFooter("Importe a cobrar", totalAmountReceivableToShow);
		table.setColumnFooter("Facturación IVA incl.", totalAmountToShow);
		
		if(table.size() > 10)
		{
			// Adjust the table height a bit
			table.setPageLength(10);
		}
		else
			table.setPageLength(table.size());
			
		return table;
	}
	
	HashMap<Integer, ReportAmountCharged> buildReport(Collection<Bill> bills)
	{
		HashMap<Integer, ReportAmountCharged> result = new HashMap<Integer, ReportAmountCharged>();
		
		for(Bill bill : bills)
		{
			if(!result.containsKey(bill.getProjectId()))
			{
				ReportAmountCharged aux = new ReportAmountCharged();
				aux.setAmountCharged(bill.getAmountCharged());
				aux.setTotalAmount(bill.getTotalAmount());
				aux.setAmountReceivable(bill.getAmountReceivable());
				aux.setProjectName(bill.getProjectName());
				result.put(bill.getProjectId(), aux);
			}
			else
			{
				ReportAmountCharged aux = result.get(bill.getProjectId());
				double amountCharged = aux.getAmountCharged() + bill.getAmountCharged();
				double totalAmount = aux.getTotalAmount() + bill.getTotalAmount();
				double receivable = aux.getAmountReceivable() + bill.getAmountReceivable();
				result.put(bill.getProjectId(), new ReportAmountCharged(bill.getProjectName(), totalAmount, amountCharged, receivable));
			}
		}

		return result;
	}
	
	@Override
	public void enter(ViewChangeEvent event) {
		super.enter(event);
		if(RequestContext.getRequestContext() != null){
			buildInputs();
			buildTables();
		}
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("880px");
		mainLayout.setHeight("880px");
		
		// top-level component properties
		setWidth("880px");
		setHeight("880px");

		// lblTitle
		lblTitle = new Label();
		lblTitle.setStyleName("titleLabel");
		lblTitle.setImmediate(false);
		lblTitle.setWidth("-1px");
		lblTitle.setHeight("-1px");
		lblTitle.setValue(getBreadCrumbToShow());
		mainLayout.addComponent(lblTitle, "top:40.0px;left:0.0px;");
				
		// popupDateFieldFrom
		popupDateFieldYear = new PopupDateField();
		popupDateFieldYear.setCaption("Año");
		popupDateFieldYear.setImmediate(true);
		popupDateFieldYear.setWidth("105px");
		popupDateFieldYear.setHeight("-1px");
		popupDateFieldYear.setTabIndex(1);
		popupDateFieldYear.setRequired(true);
		mainLayout.addComponent(popupDateFieldYear, "top:105.0px;left:0.0px;");
		
		return mainLayout;
	}

}
