package views.reports;

import java.lang.reflect.Array;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;

import org.dussan.vaadin.dcharts.DCharts;
import org.dussan.vaadin.dcharts.base.elements.XYaxis;
import org.dussan.vaadin.dcharts.base.elements.XYseries;
import org.dussan.vaadin.dcharts.data.DataSeries;
import org.dussan.vaadin.dcharts.data.Ticks;
import org.dussan.vaadin.dcharts.events.click.ChartDataClickEvent;
import org.dussan.vaadin.dcharts.events.click.ChartDataClickHandler;
import org.dussan.vaadin.dcharts.metadata.LegendPlacements;
import org.dussan.vaadin.dcharts.metadata.SeriesToggles;
import org.dussan.vaadin.dcharts.metadata.XYaxes;
import org.dussan.vaadin.dcharts.metadata.renderers.AxisRenderers;
import org.dussan.vaadin.dcharts.metadata.renderers.LabelRenderers;
import org.dussan.vaadin.dcharts.metadata.renderers.SeriesRenderers;
import org.dussan.vaadin.dcharts.options.Axes;
import org.dussan.vaadin.dcharts.options.AxesDefaults;
import org.dussan.vaadin.dcharts.options.Legend;
import org.dussan.vaadin.dcharts.options.Options;
import org.dussan.vaadin.dcharts.options.Series;
import org.dussan.vaadin.dcharts.options.SeriesDefaults;
import org.dussan.vaadin.dcharts.renderers.legend.EnhancedLegendRenderer;
import org.dussan.vaadin.dcharts.renderers.tick.AxisTickRenderer;

import views.BaseView;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.shared.ui.datefield.Resolution;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.PopupDateField;

import controllers.CategoryController;
import controllers.LiquidationController;
import controllers.ProjectController;
import entities.Category;
import entities.CompanyLiquidation;
import entities.Project;
import entities.ProjectLiquidation;
import entities.RequestContext;

public class ReportSummaryCompanyCategoriesView extends BaseView {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	private PopupDateField popupDateFieldYear;
	private Label lblTitle;
	private DCharts chart;
	private Label lblMessage;
	private ComboBox cboxCategories;
	private Collection<Category> categories;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ReportSummaryCompanyCategoriesView() {
		
		super("Reportes", "Rubros de la empresa");
		
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		lblMessage = new Label("");
		mainLayout.addComponent(lblMessage, "top:155.0px;left:0.0px;");
		
		popupDateFieldYear.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (cboxCategories.getValue() != null && popupDateFieldYear.getValue() != null) {
					int id = (int) cboxCategories.getValue();
					Category category = getCategoryById(id);
					buildChart(id, category.isCurrencyDollar());
				}
			}
		});
		
		cboxCategories.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (cboxCategories.getValue() != null && popupDateFieldYear.getValue() != null) {
					int id = (int) cboxCategories.getValue();
					Category category = getCategoryById(id);
					buildChart(id, category.isCurrencyDollar());
				}
			}
		});
		
		// TODO add user code here
	}

	void buildInputs()
	{
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.DAY_OF_YEAR, 1);
		popupDateFieldYear.setValue(cal.getTime());
		popupDateFieldYear.setDateFormat("yyyy");
		popupDateFieldYear.setResolution(Resolution.YEAR);
		
		if (chart != null) {
			mainLayout.removeComponent(chart);
		}
	}
	
	DCharts buildChart(Collection<Category> categories, boolean isCurrencyDollar)
	{
		DataSeries dataSeries = new DataSeries();
		
		Category[] array = (Category[]) Array.newInstance(Category.class, categories.size());
		categories.toArray(array);
		
		HashMap<Integer, Category> categoriesByMonth = buildCategories(array);
		
		if(isCurrencyDollar)
		{
			dataSeries.add(categoriesByMonth.get(0).getAmountDollar(), 
					   	   categoriesByMonth.get(1).getAmountDollar(), 
					       categoriesByMonth.get(2).getAmountDollar(),
					       categoriesByMonth.get(3).getAmountDollar(),
					       categoriesByMonth.get(4).getAmountDollar(),
					       categoriesByMonth.get(5).getAmountDollar(),
					       categoriesByMonth.get(6).getAmountDollar(),
					       categoriesByMonth.get(7).getAmountDollar(),
					       categoriesByMonth.get(8).getAmountDollar(),
					       categoriesByMonth.get(9).getAmountDollar(),
					       categoriesByMonth.get(10).getAmountDollar(),
					       categoriesByMonth.get(11).getAmountDollar());
		}
		else
		{
			dataSeries.add(categoriesByMonth.get(0).getAmountPeso(), 
				   	   categoriesByMonth.get(1).getAmountPeso(), 
				       categoriesByMonth.get(2).getAmountPeso(),
				       categoriesByMonth.get(3).getAmountPeso(),
				       categoriesByMonth.get(4).getAmountPeso(),
				       categoriesByMonth.get(5).getAmountPeso(),
				       categoriesByMonth.get(6).getAmountPeso(),
				       categoriesByMonth.get(7).getAmountPeso(),
				       categoriesByMonth.get(8).getAmountPeso(),
				       categoriesByMonth.get(9).getAmountPeso(),
				       categoriesByMonth.get(10).getAmountPeso(),
				       categoriesByMonth.get(11).getAmountPeso());
		}
		
		AxesDefaults axesDefaults = new AxesDefaults()
			.setLabelRenderer(LabelRenderers.CANVAS);

		Axes axes = new Axes()
		.addAxis(
			new XYaxis()
				.setRenderer(AxisRenderers.CATEGORY)
				.setTicks(
	                new Ticks()
	                    .add("Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Set", "Oct", "Nov", "Dic")))
		.addAxis(
			new XYaxis(XYaxes.Y)
				.setTickOptions(
					new AxisTickRenderer()
						.setFormatString((isCurrencyDollar ? "U$S" : "$") + " %d")));

		Options options = new Options()
			.setAxesDefaults(axesDefaults)
			.setAxes(axes);

		return new DCharts()
			.setDataSeries(dataSeries)
			.setOptions(options)
			.show();
	}
	
	void buildChart(int id, boolean isCurrencyDollar){

		if (chart != null) {
			mainLayout.removeComponent(chart);
		}
		
		Collection<Category> categories = CategoryController.getCategoriesAllVersions(id, popupDateFieldYear.getValue());
		
		if(categories.size() > 0)
		{	
			lblMessage.setValue("");
			
			chart = buildChart(categories, isCurrencyDollar);
			
			chart.setWidth(100, Unit.PERCENTAGE);
			chart.setHeight(350, Unit.PIXELS);
			
			mainLayout.addComponent(chart, "top:19%;left:0px;");
		}
		else
		{
			lblMessage.setValue("No hay datos en el año seleccionado para ese rubro");
		}
	}
	
	HashMap<Integer, Category> buildCategories(Category[] categories)
	{
		HashMap<Integer, Category> categoriesByMonth = new HashMap<Integer, Category>();
		categoriesByMonth.put(0, new Category());
		categoriesByMonth.put(1, new Category());
		categoriesByMonth.put(2, new Category());
		categoriesByMonth.put(3, new Category());
		categoriesByMonth.put(4, new Category());
		categoriesByMonth.put(5, new Category());
		categoriesByMonth.put(6, new Category());
		categoriesByMonth.put(7, new Category());
		categoriesByMonth.put(8, new Category());
		categoriesByMonth.put(9, new Category());
		categoriesByMonth.put(10, new Category());
		categoriesByMonth.put(11, new Category());
		
		for(int i = 0; i< categories.length; i++)
		{
			int month = categories[i].getAppliedDateTimeUTC().getMonth();
			categoriesByMonth.put(month, categories[i]);
		}

		return categoriesByMonth;
	}
	
	Category getCategoryById(int id)
	{
		for(Category c : categories)
		{
			if(c.getId() == id)
			{
				return c;
			}
		}
		return null;
	}
	
	@Override
	public void enter(ViewChangeEvent event) {
		super.enter(event);
		if (RequestContext.getRequestContext() != null) {
			categories = CategoryController.getCategories();
			cboxCategories.removeAllItems();
			for(Category category : categories)
			{
				if(category.getCategoryTypeId() == 1)
				{
					cboxCategories.addItem(category.getId());
					cboxCategories.setItemCaption(category.getId(), category.getName());
				}
			}
			
			buildInputs();
		}
	}
	
	@AutoGenerated
	private void buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("880px");
		mainLayout.setHeight("880px");
		
		// top-level component properties
		setWidth("880px");
		setHeight("880px");

		// lblTitle
		lblTitle = new Label();
		lblTitle.setStyleName("titleLabel");
		lblTitle.setImmediate(false);
		lblTitle.setWidth("-1px");
		lblTitle.setHeight("-1px");
		lblTitle.setValue(getBreadCrumbToShow());
		mainLayout.addComponent(lblTitle, "top:40.0px;left:0.0px;");
				
		// popupDateFieldFrom
		popupDateFieldYear = new PopupDateField();
		popupDateFieldYear.setCaption("Año");
		popupDateFieldYear.setImmediate(true);
		popupDateFieldYear.setWidth("105px");
		popupDateFieldYear.setHeight("-1px");
		popupDateFieldYear.setTabIndex(1);
		popupDateFieldYear.setRequired(true);
		mainLayout.addComponent(popupDateFieldYear, "top:105.0px;left:0.0px;");
		
		// cboxCategories
		cboxCategories = new ComboBox();
		cboxCategories.setCaption("Rubro");
		cboxCategories.setImmediate(true);
		cboxCategories.setWidth("245px");
		cboxCategories.setHeight("-1px");
		cboxCategories.setRequired(true);
		cboxCategories.setInputPrompt("Seleccione el rubro");
		cboxCategories.setTabIndex(3);
		mainLayout.addComponent(cboxCategories, "top:105.0px;left:120.0px;");
	}

}
