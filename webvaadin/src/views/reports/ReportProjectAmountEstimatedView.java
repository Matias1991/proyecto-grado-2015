package views.reports;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;

import org.dussan.vaadin.dcharts.DCharts;
import org.dussan.vaadin.dcharts.base.elements.XYaxis;
import org.dussan.vaadin.dcharts.base.elements.XYseries;
import org.dussan.vaadin.dcharts.data.DataSeries;
import org.dussan.vaadin.dcharts.data.Ticks;
import org.dussan.vaadin.dcharts.metadata.LegendPlacements;
import org.dussan.vaadin.dcharts.metadata.SeriesToggles;
import org.dussan.vaadin.dcharts.metadata.TooltipAxes;
import org.dussan.vaadin.dcharts.metadata.XYaxes;
import org.dussan.vaadin.dcharts.metadata.locations.TooltipLocations;
import org.dussan.vaadin.dcharts.metadata.renderers.AxisRenderers;
import org.dussan.vaadin.dcharts.metadata.renderers.SeriesRenderers;
import org.dussan.vaadin.dcharts.options.Axes;
import org.dussan.vaadin.dcharts.options.Highlighter;
import org.dussan.vaadin.dcharts.options.Legend;
import org.dussan.vaadin.dcharts.options.Options;
import org.dussan.vaadin.dcharts.options.Series;
import org.dussan.vaadin.dcharts.options.SeriesDefaults;
import org.dussan.vaadin.dcharts.renderers.legend.EnhancedLegendRenderer;
import org.dussan.vaadin.dcharts.renderers.tick.AxisTickRenderer;

import views.BaseView;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.shared.ui.datefield.Resolution;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Label;
import com.vaadin.ui.PopupDateField;

import controllers.BillController;
import controllers.ProjectController;
import entities.Bill;
import entities.Project;
import entities.RequestContext;

public class ReportProjectAmountEstimatedView extends BaseView {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	private PopupDateField popupDateFieldFrom;
	private PopupDateField popupDateFieldTo;
	private Label lblTitle;
	private ComboBox cboxProject;
	private DCharts chart;
	private Collection<Project> projects;
	private Label lblMessage;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ReportProjectAmountEstimatedView() {
		
		super("Reportes", "Importes estimados");
		
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		lblMessage = new Label("");
		mainLayout.addComponent(lblMessage, "top:155.0px;left:0.0px;");
		
		cboxProject.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (cboxProject.getValue() != null && popupDateFieldFrom.getValue() != null && popupDateFieldFrom.getValue() != null) {
					int id = (int) cboxProject.getValue();
					
					Project project = getProjectById(id);
					if(project.getIsCurrencyDollar())
						buildChart(id, project.getAmount(), "U$S");
					else
						
						buildChart(id, project.getAmount(), "$");
				}
			}
		});
		
		popupDateFieldFrom.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (cboxProject.getValue() != null && popupDateFieldFrom.getValue() != null && popupDateFieldFrom.getValue() != null) {
					int id = (int) cboxProject.getValue();
					
					Project project = getProjectById(id);
					if(project.getIsCurrencyDollar())
						buildChart(id, project.getAmount(), "U$S");
					else
						
						buildChart(id, project.getAmount(), "$");
				}
			}
		});
		
		popupDateFieldTo.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (cboxProject.getValue() != null && popupDateFieldFrom.getValue() != null && popupDateFieldFrom.getValue() != null) {
					int id = (int) cboxProject.getValue();
					
					Project project = getProjectById(id);
					if(project.getIsCurrencyDollar())
						buildChart(id, project.getAmount(), "U$S");
					else
						
						buildChart(id, project.getAmount(), "$");
				}
			}
		});
		
	}
	
	void buildInputs()
	{
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.DAY_OF_YEAR, 1);
		popupDateFieldFrom.setValue(cal.getTime());
		popupDateFieldFrom.setDateFormat("MM-yyyy");
		popupDateFieldFrom.setResolution(Resolution.MONTH);
		
		popupDateFieldTo.setValue(new Date());
		popupDateFieldTo.setDateFormat("MM-yyyy");
		popupDateFieldTo.setResolution(Resolution.MONTH);
		
		
		if (chart != null) {
			mainLayout.removeComponent(chart);
		}
	}
	
	DCharts buildChart(double totalAmountBills, String currency, double estimatedAmount)
	{
		DataSeries dataSeries = new DataSeries();
		
		dataSeries.add(totalAmountBills);
		dataSeries.add(estimatedAmount);
		
		SeriesDefaults seriesDefaults = new SeriesDefaults()
			.setFillToZero(true)
			.setRenderer(SeriesRenderers.BAR);

		Series series = new Series()
			.addSeries(
				new XYseries()
					.setLabel("Total facturación IVA incl. "))
		.addSeries(
				new XYseries()
					.setLabel("Importe estimado"));
		
		Legend legend = new Legend()
			.setShow(true)
			.setRendererOptions(
				new EnhancedLegendRenderer()
					.setSeriesToggle(SeriesToggles.SLOW)
					.setSeriesToggleReplot(true))
			.setPlacement(LegendPlacements.OUTSIDE_GRID);

		Highlighter highlighter = new Highlighter()
			.setShow(true)
			.setShowTooltip(true)
			.setTooltipAlwaysVisible(true)
			.setKeepTooltipInsideChart(true)
			.setTooltipLocation(TooltipLocations.NORTH)
			.setTooltipAxes(TooltipAxes.XY_BAR);
		
		Axes axes = new Axes()
			.addAxis(
				new XYaxis()
					.setRenderer(AxisRenderers.CATEGORY)
					.setTicks(
		                new Ticks()
		                    .add("Periodo " + new SimpleDateFormat("MM-yyyy").format(popupDateFieldFrom.getValue()) + " - " +  new SimpleDateFormat("MM-yyyy").format(popupDateFieldTo.getValue()))))
			.addAxis(
				new XYaxis(XYaxes.Y)
					.setPad(1.05f)
					.setTickOptions(
						new AxisTickRenderer()
							.setFormatString(currency + " %d")));

		Options options = new Options()
			.setSeriesDefaults(seriesDefaults)
			.setSeries(series)
			.setLegend(legend)
			.setHighlighter(highlighter)
			.setAxes(axes);

		return new DCharts()
			.setDataSeries(dataSeries)
			.setOptions(options)
			.show();
	}
	
	public void buildChart(int projectId, double estimatedAmount, String currency){

		if (chart != null) {
			mainLayout.removeComponent(chart);
		}
		
		//Chart pesos
		double totalAmountBills =  BillController.getTotalAmountBills(projectId, popupDateFieldFrom.getValue(), popupDateFieldTo.getValue());
		
		if(totalAmountBills != 0)
		{
			lblMessage.setValue("");
			
			chart = buildChart(totalAmountBills, "$", estimatedAmount);
			
			chart.setWidth(100, Unit.PERCENTAGE);
			chart.setHeight(350, Unit.PIXELS);
			
			mainLayout.addComponent(chart, "top:19%;left:0px;");
		}
		else
		{
			lblMessage.setValue("No hay datos en el periodo seleccionado para ese proyecto");
		}
	}

	double getTotalAmountBills(Bill[] bills)
	{
		double totalAmount = 0;
		
		for(int i = 0; i< bills.length; i++)
		{
			totalAmount += bills[i].getTotalAmount();
		}

		return totalAmount;
	}

	Project getProjectById(int id)
	{
		for(Project p : projects)
		{
			if(p.getId() == id)
			{
				return p;
			}
		}
		return null;
	}
	
	@Override
	public void enter(ViewChangeEvent event) {
		super.enter(event);
		if(RequestContext.getRequestContext() != null){
			projects = ProjectController.getActiveProjects();
			cboxProject.removeAllItems();
			for(Project project : projects)
			{
				cboxProject.addItem(project.getId());
				cboxProject.setItemCaption(project.getId(), project.getName());
			}
			
			buildInputs();
		}
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("880px");
		mainLayout.setHeight("880px");
		
		// top-level component properties
		setWidth("880px");
		setHeight("880px");

		// lblTitle
		lblTitle = new Label();
		lblTitle.setStyleName("titleLabel");
		lblTitle.setImmediate(false);
		lblTitle.setWidth("-1px");
		lblTitle.setHeight("-1px");
		lblTitle.setValue(getBreadCrumbToShow());
		mainLayout.addComponent(lblTitle, "top:40.0px;left:0.0px;");
				
		// popupDateFieldFrom
		popupDateFieldFrom = new PopupDateField();
		popupDateFieldFrom.setCaption("Desde");
		popupDateFieldFrom.setImmediate(true);
		popupDateFieldFrom.setWidth("120px");
		popupDateFieldFrom.setHeight("-1px");
		popupDateFieldFrom.setTabIndex(1);
		popupDateFieldFrom.setRequired(true);
		mainLayout.addComponent(popupDateFieldFrom, "top:105.0px;left:0.0px;");
		
		// popupDateFieldFrom
		popupDateFieldTo = new PopupDateField();
		popupDateFieldTo.setCaption("Hasta");
		popupDateFieldTo.setImmediate(true);
		popupDateFieldTo.setWidth("120px");
		popupDateFieldTo.setHeight("-1px");
		popupDateFieldTo.setTabIndex(1);
		popupDateFieldTo.setRequired(true);
		mainLayout.addComponent(popupDateFieldTo, "top:105.0px;left:140.0px;");
		
		// cboxProject
		cboxProject = new ComboBox();
		cboxProject.setCaption("Proyecto");
		cboxProject.setImmediate(true);
		cboxProject.setWidth("245px");
		cboxProject.setHeight("-1px");
		cboxProject.setRequired(true);
		cboxProject.setInputPrompt("Seleccione el proyecto");
		cboxProject.setTabIndex(3);
		mainLayout.addComponent(cboxProject, "top:105.0px;left:280.0px;");

		return mainLayout;
	}

}
